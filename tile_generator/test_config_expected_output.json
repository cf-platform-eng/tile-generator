{
  "all_properties": [
    {
      "configurable": false, 
      "default": "Tile Ninja", 
      "label": "Author", 
      "name": "author", 
      "optional": false, 
      "type": "string"
    }, 
    {
      "configurable": true, 
      "label": "Full Name", 
      "name": "customer_name", 
      "optional": true, 
      "type": "string"
    }, 
    {
      "configurable": true, 
      "description": "Address to use for junk mail", 
      "label": "Street Address", 
      "name": "street_address", 
      "optional": false, 
      "type": "string"
    }, 
    {
      "configurable": true, 
      "label": "City", 
      "name": "city", 
      "optional": false, 
      "type": "string"
    }, 
    {
      "configurable": true, 
      "default": "90310", 
      "label": "ZIP+4", 
      "name": "zip_code", 
      "optional": false, 
      "type": "string"
    }, 
    {
      "configurable": true, 
      "label": "Country", 
      "name": "country", 
      "optional": false, 
      "options": [
        {
          "default": true, 
          "label": "US", 
          "name": "country_us"
        }, 
        {
          "label": "Elsewhere", 
          "name": "country_elsewhere"
        }
      ], 
      "type": "dropdown_select"
    }, 
    {
      "configurable": true, 
      "default": [
        {
          "album": "Christmas Carols", 
          "artist": "Ops Manatee", 
          "explicit": true
        }
      ], 
      "label": "Albums", 
      "name": "example_collection", 
      "optional": false, 
      "property_blueprints": [
        {
          "label": "Album", 
          "name": "album", 
          "type": "string"
        }, 
        {
          "label": "Artist", 
          "name": "artist", 
          "type": "string"
        }, 
        {
          "label": "Explicit", 
          "name": "explicit", 
          "type": "boolean"
        }
      ], 
      "type": "collection"
    }, 
    {
      "configurable": true, 
      "default": "Pizza", 
      "label": "Food Choices", 
      "name": "example_selector", 
      "option_templates": [
        {
          "name": "pizza_option", 
          "property_blueprints": [
            {
              "configurable": true, 
              "label": "Pepperoni", 
              "name": "pepperoni", 
              "type": "boolean"
            }, 
            {
              "configurable": true, 
              "label": "Pineapple", 
              "name": "pineapple", 
              "type": "boolean"
            }, 
            {
              "configurable": true, 
              "label": "Other Toppings", 
              "name": "other_toppings", 
              "optional": true, 
              "type": "string"
            }
          ], 
          "select_value": "Pizza"
        }, 
        {
          "name": "filet_mignon_option", 
          "property_blueprints": [
            {
              "configurable": true, 
              "label": "Complex type inside selector", 
              "name": "steak_creds", 
              "type": "simple_credentials"
            }, 
            {
              "configurable": true, 
              "default": "rare", 
              "label": "How rare?", 
              "name": "rarity_dropdown", 
              "options": [
                {
                  "label": "Rare", 
                  "name": "rare"
                }, 
                {
                  "label": "Medium", 
                  "name": "medium"
                }, 
                {
                  "label": "Well done", 
                  "name": "well-done"
                }
              ], 
              "type": "dropdown_select"
            }
          ], 
          "select_value": "Filet Mignon"
        }
      ], 
      "optional": false, 
      "type": "selector"
    }, 
    {
      "configurable": true, 
      "description": "Example of simple credentials type", 
      "label": "Simple Credentials", 
      "name": "my_creds", 
      "optional": false, 
      "type": "simple_credentials"
    }, 
    {
      "configurable": true, 
      "constraints": [
        {
          "error_message": "This name cannot contain capital digits.", 
          "must_match_regex": "^[^!@#$%^&*()]*$"
        }
      ], 
      "label": "Username", 
      "name": "username", 
      "optional": false, 
      "type": "string"
    }, 
    {
      "configurable": true, 
      "label": "Password", 
      "name": "password", 
      "optional": false, 
      "type": "secret"
    }, 
    {
      "configurable": true, 
      "description": "Maximum amount of time to allow canaries to take before going healthy", 
      "label": "Canary Watch Timeout", 
      "name": "canary_watch_timeout", 
      "optional": false, 
      "type": "integer"
    }, 
    {
      "configurable": true, 
      "description": "Maximum amount of time to allow non-canaries to take before going healthy", 
      "label": "Update Watch Timeout", 
      "name": "update_watch_timeout", 
      "optional": false, 
      "type": "integer"
    }, 
    {
      "configurable": true, 
      "default": "feature_disabled", 
      "description": "Choose whether or not to enable this feature.", 
      "label": "Enable this feature?", 
      "name": "is_feature_enabled", 
      "option_templates": [
        {
          "description": "Enable this feature (requires more config).", 
          "label": "Enable feature", 
          "name": "feature_enabled", 
          "property_blueprints": [
            {
              "configurable": true, 
              "label": "Configure this feature", 
              "name": "feature_config", 
              "type": "string"
            }
          ], 
          "select_value": "feature_enabled"
        }, 
        {
          "description": "Disable this feature (no more config).", 
          "label": "Disable feature", 
          "name": "feature_disabled", 
          "select_value": "feature_disabled"
        }
      ], 
      "optional": false, 
      "type": "selector"
    }, 
    {
      "configurable": true, 
      "label": "Planets", 
      "name": "planets", 
      "optional": true, 
      "options": [
        {
          "label": "mercury", 
          "name": "mercury"
        }, 
        {
          "label": "venus", 
          "name": "Venus"
        }, 
        {
          "label": "earth", 
          "name": "Earth"
        }, 
        {
          "label": "mars", 
          "name": "Mars"
        }, 
        {
          "label": "jupiter", 
          "name": "Jupiter"
        }, 
        {
          "label": "saturn", 
          "name": "Saturn"
        }, 
        {
          "label": "uranus", 
          "name": "Uranus"
        }, 
        {
          "label": "neptune", 
          "name": "Neptune"
        }
      ], 
      "type": "multi_select_options"
    }, 
    {
      "configurable": true, 
      "default": 2, 
      "label": "Dynamic app instance count", 
      "name": "app_instances", 
      "optional": false, 
      "type": "integer"
    }, 
    {
      "configurable": true, 
      "default": "tg-test-broker1-service", 
      "label": "Auto services service name", 
      "name": "auto_service_name", 
      "optional": false, 
      "type": "string"
    }
  ], 
  "allow_paid_service_plans": true, 
  "apply_open_security_group": false, 
  "compilation_vm_disk_size": "1234123412341234", 
  "description": "A sample tile generated by tile-generator", 
  "forms": [
    {
      "description": "Examples of basic property types", 
      "label": "Contact Info", 
      "name": "contact_form", 
      "properties": [
        {
          "configurable": true, 
          "label": "Full Name", 
          "name": "customer_name", 
          "optional": true, 
          "type": "string"
        }, 
        {
          "configurable": true, 
          "description": "Address to use for junk mail", 
          "label": "Street Address", 
          "name": "street_address", 
          "optional": false, 
          "type": "string"
        }, 
        {
          "configurable": true, 
          "label": "City", 
          "name": "city", 
          "optional": false, 
          "type": "string"
        }, 
        {
          "configurable": true, 
          "default": "90310", 
          "label": "ZIP+4", 
          "name": "zip_code", 
          "optional": false, 
          "type": "string"
        }, 
        {
          "configurable": true, 
          "label": "Country", 
          "name": "country", 
          "optional": false, 
          "options": [
            {
              "default": true, 
              "label": "US", 
              "name": "country_us"
            }, 
            {
              "label": "Elsewhere", 
              "name": "country_elsewhere"
            }
          ], 
          "type": "dropdown_select"
        }
      ]
    }, 
    {
      "description": "Example of collection property type", 
      "label": "Albums", 
      "name": "albums_form", 
      "properties": [
        {
          "configurable": true, 
          "default": [
            {
              "album": "Christmas Carols", 
              "artist": "Ops Manatee", 
              "explicit": true
            }
          ], 
          "label": "Albums", 
          "name": "example_collection", 
          "optional": false, 
          "property_blueprints": [
            {
              "label": "Album", 
              "name": "album", 
              "type": "string"
            }, 
            {
              "label": "Artist", 
              "name": "artist", 
              "type": "string"
            }, 
            {
              "label": "Explicit", 
              "name": "explicit", 
              "type": "boolean"
            }
          ], 
          "type": "collection"
        }
      ]
    }, 
    {
      "description": "Example of selector property type", 
      "label": "Food Order", 
      "name": "food_form", 
      "properties": [
        {
          "configurable": true, 
          "default": "Pizza", 
          "label": "Food Choices", 
          "name": "example_selector", 
          "option_templates": [
            {
              "name": "pizza_option", 
              "property_blueprints": [
                {
                  "configurable": true, 
                  "label": "Pepperoni", 
                  "name": "pepperoni", 
                  "type": "boolean"
                }, 
                {
                  "configurable": true, 
                  "label": "Pineapple", 
                  "name": "pineapple", 
                  "type": "boolean"
                }, 
                {
                  "configurable": true, 
                  "label": "Other Toppings", 
                  "name": "other_toppings", 
                  "optional": true, 
                  "type": "string"
                }
              ], 
              "select_value": "Pizza"
            }, 
            {
              "name": "filet_mignon_option", 
              "property_blueprints": [
                {
                  "configurable": true, 
                  "label": "Complex type inside selector", 
                  "name": "steak_creds", 
                  "type": "simple_credentials"
                }, 
                {
                  "configurable": true, 
                  "default": "rare", 
                  "label": "How rare?", 
                  "name": "rarity_dropdown", 
                  "options": [
                    {
                      "label": "Rare", 
                      "name": "rare"
                    }, 
                    {
                      "label": "Medium", 
                      "name": "medium"
                    }, 
                    {
                      "label": "Well done", 
                      "name": "well-done"
                    }
                  ], 
                  "type": "dropdown_select"
                }
              ], 
              "select_value": "Filet Mignon"
            }
          ], 
          "optional": false, 
          "type": "selector"
        }
      ]
    }, 
    {
      "description": "Examples of secret property types", 
      "label": "Credentials", 
      "name": "credentials_form", 
      "properties": [
        {
          "configurable": true, 
          "description": "Example of simple credentials type", 
          "label": "Simple Credentials", 
          "name": "my_creds", 
          "optional": false, 
          "type": "simple_credentials"
        }, 
        {
          "configurable": true, 
          "constraints": [
            {
              "error_message": "This name cannot contain capital digits.", 
              "must_match_regex": "^[^!@#$%^&*()]*$"
            }
          ], 
          "label": "Username", 
          "name": "username", 
          "optional": false, 
          "type": "string"
        }, 
        {
          "configurable": true, 
          "label": "Password", 
          "name": "password", 
          "optional": false, 
          "type": "secret"
        }
      ]
    }, 
    {
      "description": "Example of user-configured update Settings", 
      "label": "Update Settings", 
      "name": "update_form", 
      "properties": [
        {
          "configurable": true, 
          "description": "Maximum amount of time to allow canaries to take before going healthy", 
          "label": "Canary Watch Timeout", 
          "name": "canary_watch_timeout", 
          "optional": false, 
          "type": "integer"
        }, 
        {
          "configurable": true, 
          "description": "Maximum amount of time to allow non-canaries to take before going healthy", 
          "label": "Update Watch Timeout", 
          "name": "update_watch_timeout", 
          "optional": false, 
          "type": "integer"
        }
      ]
    }, 
    {
      "description": "Configure this feature.", 
      "label": "Selector without subproperties", 
      "name": "selector_without_subproperties", 
      "properties": [
        {
          "configurable": true, 
          "default": "feature_disabled", 
          "description": "Choose whether or not to enable this feature.", 
          "label": "Enable this feature?", 
          "name": "is_feature_enabled", 
          "option_templates": [
            {
              "description": "Enable this feature (requires more config).", 
              "label": "Enable feature", 
              "name": "feature_enabled", 
              "property_blueprints": [
                {
                  "configurable": true, 
                  "label": "Configure this feature", 
                  "name": "feature_config", 
                  "type": "string"
                }
              ], 
              "select_value": "feature_enabled"
            }, 
            {
              "description": "Disable this feature (no more config).", 
              "label": "Disable feature", 
              "name": "feature_disabled", 
              "select_value": "feature_disabled"
            }
          ], 
          "optional": false, 
          "type": "selector"
        }
      ]
    }, 
    {
      "label": "Multi-Select Example", 
      "name": "planets_form", 
      "properties": [
        {
          "configurable": true, 
          "label": "Planets", 
          "name": "planets", 
          "optional": true, 
          "options": [
            {
              "label": "mercury", 
              "name": "mercury"
            }, 
            {
              "label": "venus", 
              "name": "Venus"
            }, 
            {
              "label": "earth", 
              "name": "Earth"
            }, 
            {
              "label": "mars", 
              "name": "Mars"
            }, 
            {
              "label": "jupiter", 
              "name": "Jupiter"
            }, 
            {
              "label": "saturn", 
              "name": "Saturn"
            }, 
            {
              "label": "uranus", 
              "name": "Uranus"
            }, 
            {
              "label": "neptune", 
              "name": "Neptune"
            }
          ], 
          "type": "multi_select_options"
        }
      ]
    }, 
    {
      "label": "App manifest config", 
      "name": "app_manifest_form", 
      "properties": [
        {
          "configurable": true, 
          "default": 2, 
          "label": "Dynamic app instance count", 
          "name": "app_instances", 
          "optional": false, 
          "type": "integer"
        }
      ]
    }, 
    {
      "label": "Auto services config", 
      "name": "auto_services_form", 
      "properties": [
        {
          "configurable": true, 
          "default": "tg-test-broker1-service", 
          "label": "Auto services service name", 
          "name": "auto_service_name", 
          "optional": false, 
          "type": "string"
        }
      ]
    }
  ], 
  "icon_file": "resources/icon.png", 
  "label": "Generated Test Tile", 
  "metadata_version": 1.8, 
  "name": "test-tile", 
  "org": "test-tile-org", 
  "packages": [
    {
      "app_manifest": {
        "buildpack": "python_buildpack", 
        "command": "python app.py", 
        "instances": "(( .properties.app_instances.value ))", 
        "memory": "256M", 
        "path": "app.zip"
      }, 
      "files": [
        {
          "name": "app.zip", 
          "path": "resources/app.zip"
        }
      ], 
      "is_app": true, 
      "is_cf": true, 
      "manifest": {
        "buildpack": "python_buildpack", 
        "command": "python app.py", 
        "instances": "(( .properties.app_instances.value ))", 
        "memory": "256M", 
        "path": "app.zip"
      }, 
      "name": "tg_test_app1", 
      "package-type": "app", 
      "properties": {
        "tg_test_app1": {
          "app_manifest": {
            "buildpack": "python_buildpack", 
            "command": "python app.py", 
            "instances": "(( .properties.app_instances.value ))", 
            "memory": "256M", 
            "path": "app.zip"
          }, 
          "auto_services": [], 
          "name": "tg_test_app1"
        }
      }
    }, 
    {
      "app_manifest": {
        "buildpack": "python_buildpack", 
        "command": "python app.py", 
        "memory": "256M", 
        "path": "app"
      }, 
      "files": [
        {
          "name": "app", 
          "path": "src/app"
        }
      ], 
      "is_app": true, 
      "is_cf": true, 
      "manifest": {
        "buildpack": "python_buildpack", 
        "command": "python app.py", 
        "memory": "256M", 
        "path": "app"
      }, 
      "name": "tg_test_app1_auto_zip", 
      "package-type": "app", 
      "properties": {
        "tg_test_app1_auto_zip": {
          "app_manifest": {
            "buildpack": "python_buildpack", 
            "command": "python app.py", 
            "memory": "256M", 
            "path": "app"
          }, 
          "auto_services": [], 
          "name": "tg_test_app1_auto_zip"
        }
      }
    }, 
    {
      "app_manifest": {
        "buildpack": "binary_buildpack", 
        "command": "./binary-app.py", 
        "memory": "256M", 
        "path": "binary-app.py"
      }, 
      "files": [
        {
          "name": "binary-app.py", 
          "path": "src/binary-app/binary-app.py"
        }
      ], 
      "is_app": true, 
      "is_cf": true, 
      "manifest": {
        "buildpack": "binary_buildpack", 
        "command": "./binary-app.py", 
        "memory": "256M", 
        "path": "binary-app.py"
      }, 
      "name": "tg_test_binary_app", 
      "package-type": "app", 
      "properties": {
        "tg_test_binary_app": {
          "app_manifest": {
            "buildpack": "binary_buildpack", 
            "command": "./binary-app.py", 
            "memory": "256M", 
            "path": "binary-app.py"
          }, 
          "auto_services": [], 
          "name": "tg_test_binary_app"
        }
      }
    }, 
    {
      "app_manifest": {
        "buildpack": "python_buildpack", 
        "command": "python app.py", 
        "memory": "256M", 
        "path": "app.zip"
      }, 
      "enable_global_access_to_plans": true, 
      "files": [
        {
          "name": "app.zip", 
          "path": "resources/app.zip"
        }
      ], 
      "is_app": true, 
      "is_broker": true, 
      "is_cf": true, 
      "manifest": {
        "buildpack": "python_buildpack", 
        "command": "python app.py", 
        "memory": "256M", 
        "path": "app.zip"
      }, 
      "name": "tg_test_broker1", 
      "package-type": "app-broker", 
      "properties": {
        "tg_test_broker1": {
          "app_manifest": {
            "buildpack": "python_buildpack", 
            "command": "python app.py", 
            "memory": "256M", 
            "path": "app.zip"
          }, 
          "auto_services": [], 
          "enable_global_access_to_plans": "(( .properties.tg_test_broker1_enable_global_access_to_plans.value ))", 
          "name": "tg_test_broker1"
        }
      }
    }, 
    {
      "app_manifest": {
        "buildpack": "python_buildpack", 
        "command": "python app.py", 
        "host": "tg-test-app2-hostname", 
        "memory": "256M", 
        "path": "app.zip"
      }, 
      "auto_services": [
        {
          "name": "tg-test-broker1-service", 
          "plan": "first-plan"
        }, 
        {
          "name": "(( .properties.auto_service_name.value ))"
        }
      ], 
      "consumes": {
        "docker-tcp": {
          "from": "docker"
        }, 
        "nats": {
          "deployment": "(( ..cf.deployment_name ))", 
          "from": "nats"
        }, 
        "redis": {
          "from": "redis"
        }
      }, 
      "files": [
        {
          "name": "app.zip", 
          "path": "resources/app.zip"
        }
      ], 
      "health_check": "none", 
      "is_app": true, 
      "is_cf": true, 
      "manifest": {
        "buildpack": "python_buildpack", 
        "command": "python app.py", 
        "host": "tg-test-app2-hostname", 
        "memory": "256M", 
        "path": "app.zip"
      }, 
      "name": "tg_test_app2", 
      "needs_cf_credentials": true, 
      "package-type": "app", 
      "properties": {
        "tg_test_app2": {
          "app_manifest": {
            "buildpack": "python_buildpack", 
            "command": "python app.py", 
            "host": "tg-test-app2-hostname", 
            "memory": "256M", 
            "path": "app.zip"
          }, 
          "auto_services": [
            {
              "name": "tg-test-broker1-service", 
              "plan": "first-plan"
            }, 
            {
              "name": "(( .properties.auto_service_name.value ))"
            }
          ], 
          "name": "tg_test_app2"
        }
      }
    }, 
    {
      "app_manifest": {
        "buildpack": "python_buildpack", 
        "command": "python app.py", 
        "memory": "256M", 
        "path": "app.zip"
      }, 
      "consumes": {
        "nats": {
          "deployment": "(( ..cf.deployment_name ))", 
          "from": "nats"
        }, 
        "redis": {
          "from": "redis"
        }
      }, 
      "files": [
        {
          "name": "app.zip", 
          "path": "resources/app.zip"
        }
      ], 
      "internal_service_names": [
        "service1", 
        "service2"
      ], 
      "is_app": true, 
      "is_broker": true, 
      "is_cf": true, 
      "manifest": {
        "buildpack": "python_buildpack", 
        "command": "python app.py", 
        "memory": "256M", 
        "path": "app.zip"
      }, 
      "name": "tg_test_broker2", 
      "package-type": "app-broker", 
      "properties": {
        "tg_test_broker2": {
          "app_manifest": {
            "buildpack": "python_buildpack", 
            "command": "python app.py", 
            "memory": "256M", 
            "path": "app.zip"
          }, 
          "auto_services": [], 
          "enable_global_access_to_plans": "(( .properties.tg_test_broker2_enable_global_access_to_plans.value ))", 
          "name": "tg_test_broker2"
        }
      }
    }, 
    {
      "buildpack_order": 99, 
      "files": [
        {
          "name": "buildpack.zip", 
          "path": "resources/buildpack.zip"
        }
      ], 
      "is_buildpack": true, 
      "is_cf": true, 
      "name": "tg_test_buildpack", 
      "package-type": "buildpack", 
      "path": "buildpack.zip", 
      "properties": {
        "tg_test_buildpack": {
          "buildpack_order": "(( .properties.tg_test_buildpack_buildpack_order.value ))", 
          "name": "tg_test_buildpack"
        }
      }
    }, 
    {
      "app_manifest": {
        "memory": "256M"
      }, 
      "auto_services": [
        {
          "name": "tg-test-broker1-service", 
          "plan": "second-plan", 
          "service_instance": "tg-test-svc"
        }
      ], 
      "files": [], 
      "image": "guidowb/sample-cf-app", 
      "is_app": true, 
      "is_cf": true, 
      "is_docker": true, 
      "is_docker_app": true, 
      "manifest": {
        "memory": "256M"
      }, 
      "name": "tg_test_app3", 
      "package-type": "docker-app", 
      "properties": {
        "tg_test_app3": {
          "app_manifest": {
            "memory": "256M"
          }, 
          "auto_services": [
            {
              "name": "tg-test-broker1-service", 
              "plan": "second-plan", 
              "service_instance": "tg-test-svc"
            }
          ], 
          "name": "tg_test_app3"
        }
      }
    }, 
    {
      "cpu": 2, 
      "docker_images": [
        "guidowb/sample-cf-app"
      ], 
      "ephemeral_disk": 4096, 
      "files": [
        {
          "name": "guidowb-sample-cf-app.tgz", 
          "path": "docker:guidowb/sample-cf-app"
        }
      ], 
      "instances": 1, 
      "is_docker": true, 
      "manifest": {
        "containers": [
          {
            "bind_ports": [
              "80:80", 
              "443:443", 
              "8080:8080", 
              "8443:8443"
            ], 
            "env_file": [
              "/var/vcap/jobs/docker-bosh-tg_test_app4/bin/opsmgr.env"
            ], 
            "image": "guidowb/sample-cf-app", 
            "name": "app", 
            "volumes": [
              "/var/vcap/data/certs:/mnt/certs/opsman-certs:ro", 
              "/usr/local/share/ca-certificates:/mnt/certs/host-ca-certs:ro"
            ]
          }
        ]
      }, 
      "memory": 512, 
      "name": "tg_test_app4", 
      "package-type": "docker-bosh", 
      "persistent_disk": 2048, 
      "properties": {
        "tg_test_app4": {
          "name": "tg_test_app4"
        }
      }, 
      "routes": [
        {
          "port": 8080, 
          "prefix": "my-route"
        }
      ]
    }, 
    {
      "is_bosh_release": true, 
      "jobs": [
        {
          "cpu": 2, 
          "default_internet_connected": false, 
          "dynamic_ip": 1, 
          "ephemeral_disk": 4096, 
          "instances": 2, 
          "manifest": {
            "allow_paid_service_plans": "(( .properties.allow_paid_service_plans.value ))", 
            "app_domains": [
              "(( ..cf.cloud_controller.apps_domain.value ))"
            ], 
            "app_instances": "(( .properties.app_instances.value ))", 
            "apply_open_security_group": "(( .properties.apply_open_security_group.value ))", 
            "author": "(( .properties.author.value ))", 
            "auto_service_name": "(( .properties.auto_service_name.value ))", 
            "canary_watch_timeout": "(( .properties.canary_watch_timeout.value ))", 
            "cf": {
              "admin_password": "(( ..cf.uaa.system_services_credentials.password ))", 
              "admin_user": "(( ..cf.uaa.system_services_credentials.identity ))"
            }, 
            "city": "(( .properties.city.value ))", 
            "country": "(( .properties.country.value ))", 
            "custom_dynamic_service_plan_1": "(( .properties.custom_dynamic_service_plan_1.value ))", 
            "custom_dynamic_service_plan_2": "(( .properties.custom_dynamic_service_plan_2.value ))", 
            "customer_name": "(( .properties.customer_name.value ))", 
            "domain": "(( ..cf.cloud_controller.system_domain.value ))", 
            "example_collection": "(( .properties.example_collection.value ))", 
            "example_selector": {
              "selected_option": "(( .properties.example_selector.selected_option.parsed_manifest(manifest_snippet) ))", 
              "value": "(( .properties.example_selector.value ))"
            }, 
            "is_feature_enabled": {
              "selected_option": "(( .properties.is_feature_enabled.selected_option.parsed_manifest(manifest_snippet) ))", 
              "value": "(( .properties.is_feature_enabled.value ))"
            }, 
            "my_creds": {
              "identity": "(( .properties.my_creds.identity ))", 
              "password": "(( .properties.my_creds.password ))"
            }, 
            "opsman_ca": "(( $ops_manager.ca_certificate ))", 
            "org": "(( .properties.org.value ))", 
            "password": "(( .properties.password.value ))", 
            "planets": "(( .properties.planets.value ))", 
            "runtime_test_release": {
              "name": "runtime_test_release"
            }, 
            "space": "(( .properties.space.value ))", 
            "ssl": {
              "skip_cert_verify": "(( ..cf.ha_proxy.skip_cert_verify.value ))"
            }, 
            "street_address": "(( .properties.street_address.value ))", 
            "tg_test_app1": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "instances": "(( .properties.app_instances.value ))", 
                "memory": "256M", 
                "path": "app.zip"
              }, 
              "auto_services": [], 
              "name": "tg_test_app1"
            }, 
            "tg_test_app1_auto_zip": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "memory": "256M", 
                "path": "app"
              }, 
              "auto_services": [], 
              "name": "tg_test_app1_auto_zip"
            }, 
            "tg_test_app2": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "host": "tg-test-app2-hostname", 
                "memory": "256M", 
                "path": "app.zip"
              }, 
              "auto_services": [
                {
                  "name": "tg-test-broker1-service", 
                  "plan": "first-plan"
                }, 
                {
                  "name": "(( .properties.auto_service_name.value ))"
                }
              ], 
              "name": "tg_test_app2"
            }, 
            "tg_test_app3": {
              "app_manifest": {
                "memory": "256M"
              }, 
              "auto_services": [
                {
                  "name": "tg-test-broker1-service", 
                  "plan": "second-plan", 
                  "service_instance": "tg-test-svc"
                }
              ], 
              "name": "tg_test_app3"
            }, 
            "tg_test_app4": {
              "name": "tg_test_app4"
            }, 
            "tg_test_app5": {
              "name": "tg_test_app5"
            }, 
            "tg_test_app6": {
              "name": "tg_test_app6"
            }, 
            "tg_test_app7": {
              "name": "tg_test_app7"
            }, 
            "tg_test_binary_app": {
              "app_manifest": {
                "buildpack": "binary_buildpack", 
                "command": "./binary-app.py", 
                "memory": "256M", 
                "path": "binary-app.py"
              }, 
              "auto_services": [], 
              "name": "tg_test_binary_app"
            }, 
            "tg_test_broker1": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "memory": "256M", 
                "path": "app.zip"
              }, 
              "auto_services": [], 
              "enable_global_access_to_plans": "(( .properties.tg_test_broker1_enable_global_access_to_plans.value ))", 
              "name": "tg_test_broker1"
            }, 
            "tg_test_broker2": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "memory": "256M", 
                "path": "app.zip"
              }, 
              "auto_services": [], 
              "enable_global_access_to_plans": "(( .properties.tg_test_broker2_enable_global_access_to_plans.value ))", 
              "name": "tg_test_broker2"
            }, 
            "tg_test_buildpack": {
              "buildpack_order": "(( .properties.tg_test_buildpack_buildpack_order.value ))", 
              "name": "tg_test_buildpack"
            }, 
            "uaa": {
              "admin_client": "(( ..cf.uaa.admin_client_credentials.identity ))", 
              "admin_client_secret": "(( ..cf.uaa.admin_client_credentials.password ))"
            }, 
            "update_watch_timeout": "(( .properties.update_watch_timeout.value ))", 
            "username": "(( .properties.username.value ))", 
            "zip_code": "(( .properties.zip_code.value ))"
          }, 
          "max_in_flight": 1, 
          "memory": 512, 
          "name": "redis", 
          "persistent_disk": 4096, 
          "properties": {
            "password": "red!s"
          }, 
          "static_ip": 0, 
          "template": "redis", 
          "templates": [
            {
              "name": "redis", 
              "release": "redis"
            }
          ], 
          "type": "redis", 
          "varname": "redis"
        }, 
        {
          "cpu": 2, 
          "dynamic_ip": 1, 
          "ephemeral_disk": 4096, 
          "lifecycle": "errand", 
          "manifest": {
            "allow_paid_service_plans": "(( .properties.allow_paid_service_plans.value ))", 
            "app_domains": [
              "(( ..cf.cloud_controller.apps_domain.value ))"
            ], 
            "app_instances": "(( .properties.app_instances.value ))", 
            "apply_open_security_group": "(( .properties.apply_open_security_group.value ))", 
            "author": "(( .properties.author.value ))", 
            "auto_service_name": "(( .properties.auto_service_name.value ))", 
            "canary_watch_timeout": "(( .properties.canary_watch_timeout.value ))", 
            "cf": {
              "admin_password": "(( ..cf.uaa.system_services_credentials.password ))", 
              "admin_user": "(( ..cf.uaa.system_services_credentials.identity ))", 
              "some": "property"
            }, 
            "city": "(( .properties.city.value ))", 
            "country": "(( .properties.country.value ))", 
            "custom_dynamic_service_plan_1": "(( .properties.custom_dynamic_service_plan_1.value ))", 
            "custom_dynamic_service_plan_2": "(( .properties.custom_dynamic_service_plan_2.value ))", 
            "customer_name": "(( .properties.customer_name.value ))", 
            "domain": "(( ..cf.cloud_controller.system_domain.value ))", 
            "example_collection": "(( .properties.example_collection.value ))", 
            "example_selector": {
              "selected_option": "(( .properties.example_selector.selected_option.parsed_manifest(manifest_snippet) ))", 
              "value": "(( .properties.example_selector.value ))"
            }, 
            "is_feature_enabled": {
              "selected_option": "(( .properties.is_feature_enabled.selected_option.parsed_manifest(manifest_snippet) ))", 
              "value": "(( .properties.is_feature_enabled.value ))"
            }, 
            "my_creds": {
              "identity": "(( .properties.my_creds.identity ))", 
              "password": "(( .properties.my_creds.password ))"
            }, 
            "opsman_ca": "(( $ops_manager.ca_certificate ))", 
            "org": "(( .properties.org.value ))", 
            "password": "(( .properties.password.value ))", 
            "planets": "(( .properties.planets.value ))", 
            "runtime_test_release": {
              "name": "runtime_test_release"
            }, 
            "space": "(( .properties.space.value ))", 
            "ssl": {
              "skip_cert_verify": "(( ..cf.ha_proxy.skip_cert_verify.value ))"
            }, 
            "street_address": "(( .properties.street_address.value ))", 
            "tg_test_app1": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "instances": "(( .properties.app_instances.value ))", 
                "memory": "256M", 
                "path": "app.zip"
              }, 
              "auto_services": [], 
              "name": "tg_test_app1"
            }, 
            "tg_test_app1_auto_zip": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "memory": "256M", 
                "path": "app"
              }, 
              "auto_services": [], 
              "name": "tg_test_app1_auto_zip"
            }, 
            "tg_test_app2": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "host": "tg-test-app2-hostname", 
                "memory": "256M", 
                "path": "app.zip"
              }, 
              "auto_services": [
                {
                  "name": "tg-test-broker1-service", 
                  "plan": "first-plan"
                }, 
                {
                  "name": "(( .properties.auto_service_name.value ))"
                }
              ], 
              "name": "tg_test_app2"
            }, 
            "tg_test_app3": {
              "app_manifest": {
                "memory": "256M"
              }, 
              "auto_services": [
                {
                  "name": "tg-test-broker1-service", 
                  "plan": "second-plan", 
                  "service_instance": "tg-test-svc"
                }
              ], 
              "name": "tg_test_app3"
            }, 
            "tg_test_app4": {
              "name": "tg_test_app4"
            }, 
            "tg_test_app5": {
              "name": "tg_test_app5"
            }, 
            "tg_test_app6": {
              "name": "tg_test_app6"
            }, 
            "tg_test_app7": {
              "name": "tg_test_app7"
            }, 
            "tg_test_binary_app": {
              "app_manifest": {
                "buildpack": "binary_buildpack", 
                "command": "./binary-app.py", 
                "memory": "256M", 
                "path": "binary-app.py"
              }, 
              "auto_services": [], 
              "name": "tg_test_binary_app"
            }, 
            "tg_test_broker1": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "memory": "256M", 
                "path": "app.zip"
              }, 
              "auto_services": [], 
              "enable_global_access_to_plans": "(( .properties.tg_test_broker1_enable_global_access_to_plans.value ))", 
              "name": "tg_test_broker1"
            }, 
            "tg_test_broker2": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "memory": "256M", 
                "path": "app.zip"
              }, 
              "auto_services": [], 
              "enable_global_access_to_plans": "(( .properties.tg_test_broker2_enable_global_access_to_plans.value ))", 
              "name": "tg_test_broker2"
            }, 
            "tg_test_buildpack": {
              "buildpack_order": "(( .properties.tg_test_buildpack_buildpack_order.value ))", 
              "name": "tg_test_buildpack"
            }, 
            "uaa": {
              "admin_client": "(( ..cf.uaa.admin_client_credentials.identity ))", 
              "admin_client_secret": "(( ..cf.uaa.admin_client_credentials.password ))"
            }, 
            "update_watch_timeout": "(( .properties.update_watch_timeout.value ))", 
            "username": "(( .properties.username.value ))", 
            "zip_code": "(( .properties.zip_code.value ))"
          }, 
          "memory": 512, 
          "name": "sanity-tests", 
          "persistent_disk": 0, 
          "post_deploy": true, 
          "properties": {
            "cf": {
              "some": "property"
            }
          }, 
          "run_post_deploy_errand_default": "when-changed", 
          "template": "sanity-tests", 
          "templates": [
            {
              "name": "sanity-tests", 
              "release": "redis"
            }
          ], 
          "type": "sanity-tests", 
          "varname": "sanity_tests"
        }
      ], 
      "name": "tg_test_app5", 
      "package-type": "bosh-release", 
      "path": "resources/redis-13.1.2.tgz", 
      "properties": {
        "tg_test_app5": {
          "name": "tg_test_app5"
        }
      }
    }, 
    {
      "is_bosh_release": true, 
      "name": "runtime_test_release", 
      "package-type": "bosh-release", 
      "path": "resources/runtime-test-release.tgz", 
      "properties": {
        "runtime_test_release": {
          "name": "runtime_test_release"
        }
      }
    }, 
    {
      "is_bosh_release": true, 
      "jobs": [
        {
          "dynamic_ip": 1, 
          "instances": 1, 
          "manifest": {
            "allow_paid_service_plans": "(( .properties.allow_paid_service_plans.value ))", 
            "app_domains": [
              "(( ..cf.cloud_controller.apps_domain.value ))"
            ], 
            "app_instances": "(( .properties.app_instances.value ))", 
            "apply_open_security_group": "(( .properties.apply_open_security_group.value ))", 
            "author": "(( .properties.author.value ))", 
            "auto_service_name": "(( .properties.auto_service_name.value ))", 
            "canary_watch_timeout": "(( .properties.canary_watch_timeout.value ))", 
            "cf": {
              "admin_password": "(( ..cf.uaa.system_services_credentials.password ))", 
              "admin_user": "(( ..cf.uaa.system_services_credentials.identity ))"
            }, 
            "city": "(( .properties.city.value ))", 
            "country": "(( .properties.country.value ))", 
            "custom_dynamic_service_plan_1": "(( .properties.custom_dynamic_service_plan_1.value ))", 
            "custom_dynamic_service_plan_2": "(( .properties.custom_dynamic_service_plan_2.value ))", 
            "customer_name": "(( .properties.customer_name.value ))", 
            "domain": "(( ..cf.cloud_controller.system_domain.value ))", 
            "example_collection": "(( .properties.example_collection.value ))", 
            "example_selector": {
              "selected_option": "(( .properties.example_selector.selected_option.parsed_manifest(manifest_snippet) ))", 
              "value": "(( .properties.example_selector.value ))"
            }, 
            "is_feature_enabled": {
              "selected_option": "(( .properties.is_feature_enabled.selected_option.parsed_manifest(manifest_snippet) ))", 
              "value": "(( .properties.is_feature_enabled.value ))"
            }, 
            "my_creds": {
              "identity": "(( .properties.my_creds.identity ))", 
              "password": "(( .properties.my_creds.password ))"
            }, 
            "opsman_ca": "(( $ops_manager.ca_certificate ))", 
            "org": "(( .properties.org.value ))", 
            "password": "(( .properties.password.value ))", 
            "planets": "(( .properties.planets.value ))", 
            "route_registrar": {
              "routes": [
                {
                  "name": "runtime_conf_yes", 
                  "port": 8119, 
                  "registration_interval": "20s", 
                  "uris": [
                    "runtime-conf-yes.(( ..cf.cloud_controller.system_domain.value ))"
                  ]
                }
              ]
            }, 
            "runtime_test_release": {
              "name": "runtime_test_release"
            }, 
            "space": "(( .properties.space.value ))", 
            "ssl": {
              "skip_cert_verify": "(( ..cf.ha_proxy.skip_cert_verify.value ))"
            }, 
            "street_address": "(( .properties.street_address.value ))", 
            "tg_test_app1": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "instances": "(( .properties.app_instances.value ))", 
                "memory": "256M", 
                "path": "app.zip"
              }, 
              "auto_services": [], 
              "name": "tg_test_app1"
            }, 
            "tg_test_app1_auto_zip": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "memory": "256M", 
                "path": "app"
              }, 
              "auto_services": [], 
              "name": "tg_test_app1_auto_zip"
            }, 
            "tg_test_app2": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "host": "tg-test-app2-hostname", 
                "memory": "256M", 
                "path": "app.zip"
              }, 
              "auto_services": [
                {
                  "name": "tg-test-broker1-service", 
                  "plan": "first-plan"
                }, 
                {
                  "name": "(( .properties.auto_service_name.value ))"
                }
              ], 
              "name": "tg_test_app2"
            }, 
            "tg_test_app3": {
              "app_manifest": {
                "memory": "256M"
              }, 
              "auto_services": [
                {
                  "name": "tg-test-broker1-service", 
                  "plan": "second-plan", 
                  "service_instance": "tg-test-svc"
                }
              ], 
              "name": "tg_test_app3"
            }, 
            "tg_test_app4": {
              "name": "tg_test_app4"
            }, 
            "tg_test_app5": {
              "name": "tg_test_app5"
            }, 
            "tg_test_app6": {
              "name": "tg_test_app6"
            }, 
            "tg_test_app7": {
              "name": "tg_test_app7"
            }, 
            "tg_test_binary_app": {
              "app_manifest": {
                "buildpack": "binary_buildpack", 
                "command": "./binary-app.py", 
                "memory": "256M", 
                "path": "binary-app.py"
              }, 
              "auto_services": [], 
              "name": "tg_test_binary_app"
            }, 
            "tg_test_broker1": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "memory": "256M", 
                "path": "app.zip"
              }, 
              "auto_services": [], 
              "enable_global_access_to_plans": "(( .properties.tg_test_broker1_enable_global_access_to_plans.value ))", 
              "name": "tg_test_broker1"
            }, 
            "tg_test_broker2": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "memory": "256M", 
                "path": "app.zip"
              }, 
              "auto_services": [], 
              "enable_global_access_to_plans": "(( .properties.tg_test_broker2_enable_global_access_to_plans.value ))", 
              "name": "tg_test_broker2"
            }, 
            "tg_test_buildpack": {
              "buildpack_order": "(( .properties.tg_test_buildpack_buildpack_order.value ))", 
              "name": "tg_test_buildpack"
            }, 
            "uaa": {
              "admin_client": "(( ..cf.uaa.admin_client_credentials.identity ))", 
              "admin_client_secret": "(( ..cf.uaa.admin_client_credentials.password ))"
            }, 
            "update_watch_timeout": "(( .properties.update_watch_timeout.value ))", 
            "username": "(( .properties.username.value ))", 
            "zip_code": "(( .properties.zip_code.value ))"
          }, 
          "name": "node-yes", 
          "properties": {
            "route_registrar": {
              "routes": [
                {
                  "name": "runtime_conf_yes", 
                  "port": 8119, 
                  "registration_interval": "20s", 
                  "uris": [
                    "runtime-conf-yes.(( ..cf.cloud_controller.system_domain.value ))"
                  ]
                }
              ]
            }
          }, 
          "template": "node-yes", 
          "templates": [
            {
              "colocated": true, 
              "instances": [
                "node-yes/first"
              ], 
              "name": "no-op", 
              "post_deploy": true, 
              "release": "no-op-release", 
              "run_default": true
            }, 
            {
              "consumes": {
                "nats": {
                  "deployment": "(( ..cf.deployment_name ))", 
                  "from": "nats"
                }
              }, 
              "name": "route_registrar", 
              "release": "routing"
            }
          ], 
          "type": "node-yes", 
          "varname": "node_yes"
        }, 
        {
          "dynamic_ip": 1, 
          "instances": 1, 
          "manifest": {
            "allow_paid_service_plans": "(( .properties.allow_paid_service_plans.value ))", 
            "app_domains": [
              "(( ..cf.cloud_controller.apps_domain.value ))"
            ], 
            "app_instances": "(( .properties.app_instances.value ))", 
            "apply_open_security_group": "(( .properties.apply_open_security_group.value ))", 
            "author": "(( .properties.author.value ))", 
            "auto_service_name": "(( .properties.auto_service_name.value ))", 
            "canary_watch_timeout": "(( .properties.canary_watch_timeout.value ))", 
            "cf": {
              "admin_password": "(( ..cf.uaa.system_services_credentials.password ))", 
              "admin_user": "(( ..cf.uaa.system_services_credentials.identity ))"
            }, 
            "city": "(( .properties.city.value ))", 
            "country": "(( .properties.country.value ))", 
            "custom_dynamic_service_plan_1": "(( .properties.custom_dynamic_service_plan_1.value ))", 
            "custom_dynamic_service_plan_2": "(( .properties.custom_dynamic_service_plan_2.value ))", 
            "customer_name": "(( .properties.customer_name.value ))", 
            "domain": "(( ..cf.cloud_controller.system_domain.value ))", 
            "example_collection": "(( .properties.example_collection.value ))", 
            "example_selector": {
              "selected_option": "(( .properties.example_selector.selected_option.parsed_manifest(manifest_snippet) ))", 
              "value": "(( .properties.example_selector.value ))"
            }, 
            "is_feature_enabled": {
              "selected_option": "(( .properties.is_feature_enabled.selected_option.parsed_manifest(manifest_snippet) ))", 
              "value": "(( .properties.is_feature_enabled.value ))"
            }, 
            "my_creds": {
              "identity": "(( .properties.my_creds.identity ))", 
              "password": "(( .properties.my_creds.password ))"
            }, 
            "opsman_ca": "(( $ops_manager.ca_certificate ))", 
            "org": "(( .properties.org.value ))", 
            "password": "(( .properties.password.value ))", 
            "planets": "(( .properties.planets.value ))", 
            "route_registrar": {
              "routes": [
                {
                  "name": "runtime_conf_no", 
                  "port": 8119, 
                  "registration_interval": "20s", 
                  "uris": [
                    "runtime-conf-no.(( ..cf.cloud_controller.system_domain.value ))"
                  ]
                }
              ]
            }, 
            "runtime_test_release": {
              "name": "runtime_test_release"
            }, 
            "space": "(( .properties.space.value ))", 
            "ssl": {
              "skip_cert_verify": "(( ..cf.ha_proxy.skip_cert_verify.value ))"
            }, 
            "street_address": "(( .properties.street_address.value ))", 
            "tg_test_app1": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "instances": "(( .properties.app_instances.value ))", 
                "memory": "256M", 
                "path": "app.zip"
              }, 
              "auto_services": [], 
              "name": "tg_test_app1"
            }, 
            "tg_test_app1_auto_zip": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "memory": "256M", 
                "path": "app"
              }, 
              "auto_services": [], 
              "name": "tg_test_app1_auto_zip"
            }, 
            "tg_test_app2": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "host": "tg-test-app2-hostname", 
                "memory": "256M", 
                "path": "app.zip"
              }, 
              "auto_services": [
                {
                  "name": "tg-test-broker1-service", 
                  "plan": "first-plan"
                }, 
                {
                  "name": "(( .properties.auto_service_name.value ))"
                }
              ], 
              "name": "tg_test_app2"
            }, 
            "tg_test_app3": {
              "app_manifest": {
                "memory": "256M"
              }, 
              "auto_services": [
                {
                  "name": "tg-test-broker1-service", 
                  "plan": "second-plan", 
                  "service_instance": "tg-test-svc"
                }
              ], 
              "name": "tg_test_app3"
            }, 
            "tg_test_app4": {
              "name": "tg_test_app4"
            }, 
            "tg_test_app5": {
              "name": "tg_test_app5"
            }, 
            "tg_test_app6": {
              "name": "tg_test_app6"
            }, 
            "tg_test_app7": {
              "name": "tg_test_app7"
            }, 
            "tg_test_binary_app": {
              "app_manifest": {
                "buildpack": "binary_buildpack", 
                "command": "./binary-app.py", 
                "memory": "256M", 
                "path": "binary-app.py"
              }, 
              "auto_services": [], 
              "name": "tg_test_binary_app"
            }, 
            "tg_test_broker1": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "memory": "256M", 
                "path": "app.zip"
              }, 
              "auto_services": [], 
              "enable_global_access_to_plans": "(( .properties.tg_test_broker1_enable_global_access_to_plans.value ))", 
              "name": "tg_test_broker1"
            }, 
            "tg_test_broker2": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "memory": "256M", 
                "path": "app.zip"
              }, 
              "auto_services": [], 
              "enable_global_access_to_plans": "(( .properties.tg_test_broker2_enable_global_access_to_plans.value ))", 
              "name": "tg_test_broker2"
            }, 
            "tg_test_buildpack": {
              "buildpack_order": "(( .properties.tg_test_buildpack_buildpack_order.value ))", 
              "name": "tg_test_buildpack"
            }, 
            "uaa": {
              "admin_client": "(( ..cf.uaa.admin_client_credentials.identity ))", 
              "admin_client_secret": "(( ..cf.uaa.admin_client_credentials.password ))"
            }, 
            "update_watch_timeout": "(( .properties.update_watch_timeout.value ))", 
            "username": "(( .properties.username.value ))", 
            "zip_code": "(( .properties.zip_code.value ))"
          }, 
          "name": "node-no", 
          "properties": {
            "route_registrar": {
              "routes": [
                {
                  "name": "runtime_conf_no", 
                  "port": 8119, 
                  "registration_interval": "20s", 
                  "uris": [
                    "runtime-conf-no.(( ..cf.cloud_controller.system_domain.value ))"
                  ]
                }
              ]
            }
          }, 
          "template": "node-no", 
          "templates": [
            {
              "consumes": {
                "nats": {
                  "deployment": "(( ..cf.deployment_name ))", 
                  "from": "nats"
                }
              }, 
              "name": "route_registrar", 
              "release": "routing"
            }
          ], 
          "type": "node-no", 
          "varname": "node_no"
        }
      ], 
      "name": "tg_test_app6", 
      "package-type": "bosh-release", 
      "path": "resources/no-op-release.tgz", 
      "properties": {
        "tg_test_app6": {
          "name": "tg_test_app6"
        }
      }
    }, 
    {
      "is_bosh_release": true, 
      "jobs": [
        {
          "dynamic_ip": 1, 
          "instances": 1, 
          "manifest": {
            "app_instances": "(( .properties.app_instances.value ))", 
            "author": "(( .properties.author.value ))", 
            "auto_service_name": "(( .properties.auto_service_name.value ))", 
            "canary_watch_timeout": "(( .properties.canary_watch_timeout.value ))", 
            "city": "(( .properties.city.value ))", 
            "country": "(( .properties.country.value ))", 
            "custom_dynamic_service_plan_1": "(( .properties.custom_dynamic_service_plan_1.value ))", 
            "custom_dynamic_service_plan_2": "(( .properties.custom_dynamic_service_plan_2.value ))", 
            "customer_name": "(( .properties.customer_name.value ))", 
            "example_collection": "(( .properties.example_collection.value ))", 
            "example_selector": {
              "selected_option": "(( .properties.example_selector.selected_option.parsed_manifest(manifest_snippet) ))", 
              "value": "(( .properties.example_selector.value ))"
            }, 
            "is_feature_enabled": {
              "selected_option": "(( .properties.is_feature_enabled.selected_option.parsed_manifest(manifest_snippet) ))", 
              "value": "(( .properties.is_feature_enabled.value ))"
            }, 
            "my_creds": {
              "identity": "(( .properties.my_creds.identity ))", 
              "password": "(( .properties.my_creds.password ))"
            }, 
            "password": "(( .properties.password.value ))", 
            "planets": "(( .properties.planets.value ))", 
            "runtime_test_release": {
              "name": "runtime_test_release"
            }, 
            "street_address": "(( .properties.street_address.value ))", 
            "tg_test_app1": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "instances": "(( .properties.app_instances.value ))", 
                "memory": "256M", 
                "path": "app.zip"
              }, 
              "auto_services": [], 
              "name": "tg_test_app1"
            }, 
            "tg_test_app1_auto_zip": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "memory": "256M", 
                "path": "app"
              }, 
              "auto_services": [], 
              "name": "tg_test_app1_auto_zip"
            }, 
            "tg_test_app2": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "host": "tg-test-app2-hostname", 
                "memory": "256M", 
                "path": "app.zip"
              }, 
              "auto_services": [
                {
                  "name": "tg-test-broker1-service", 
                  "plan": "first-plan"
                }, 
                {
                  "name": "(( .properties.auto_service_name.value ))"
                }
              ], 
              "name": "tg_test_app2"
            }, 
            "tg_test_app3": {
              "app_manifest": {
                "memory": "256M"
              }, 
              "auto_services": [
                {
                  "name": "tg-test-broker1-service", 
                  "plan": "second-plan", 
                  "service_instance": "tg-test-svc"
                }
              ], 
              "name": "tg_test_app3"
            }, 
            "tg_test_app4": {
              "name": "tg_test_app4"
            }, 
            "tg_test_app5": {
              "name": "tg_test_app5"
            }, 
            "tg_test_app6": {
              "name": "tg_test_app6"
            }, 
            "tg_test_app7": {
              "name": "tg_test_app7"
            }, 
            "tg_test_binary_app": {
              "app_manifest": {
                "buildpack": "binary_buildpack", 
                "command": "./binary-app.py", 
                "memory": "256M", 
                "path": "binary-app.py"
              }, 
              "auto_services": [], 
              "name": "tg_test_binary_app"
            }, 
            "tg_test_broker1": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "memory": "256M", 
                "path": "app.zip"
              }, 
              "auto_services": [], 
              "enable_global_access_to_plans": "(( .properties.tg_test_broker1_enable_global_access_to_plans.value ))", 
              "name": "tg_test_broker1"
            }, 
            "tg_test_broker2": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "memory": "256M", 
                "path": "app.zip"
              }, 
              "auto_services": [], 
              "enable_global_access_to_plans": "(( .properties.tg_test_broker2_enable_global_access_to_plans.value ))", 
              "name": "tg_test_broker2"
            }, 
            "tg_test_buildpack": {
              "buildpack_order": "(( .properties.tg_test_buildpack_buildpack_order.value ))", 
              "name": "tg_test_buildpack"
            }, 
            "update_watch_timeout": "(( .properties.update_watch_timeout.value ))", 
            "username": "(( .properties.username.value ))", 
            "zip_code": "(( .properties.zip_code.value ))"
          }, 
          "name": "no-op", 
          "properties": {}, 
          "template": "standalone", 
          "templates": [
            {
              "name": "no-op", 
              "release": "standalone-release"
            }
          ], 
          "type": "standalone", 
          "varname": "no_op"
        }
      ], 
      "name": "tg_test_app7", 
      "package-type": "bosh-release", 
      "path": "resources/standalone-release.tgz", 
      "properties": {
        "tg_test_app7": {
          "name": "tg_test_app7"
        }
      }
    }
  ], 
  "post_deploy_errands": [
    {
      "name": "deploy-all"
    }
  ], 
  "pre_delete_errands": [
    {
      "name": "delete-all"
    }
  ], 
  "properties": [
    {
      "label": "Author", 
      "name": "author", 
      "type": "string", 
      "value": "Tile Ninja"
    }
  ], 
  "purge_service_brokers": true, 
  "releases": {
    "docker-boshrelease": {
      "name": "docker-boshrelease", 
      "path": "https://bosh.io/d/github.com/cf-platform-eng/docker-boshrelease"
    }, 
    "routing": {
      "name": "routing", 
      "path": "https://bosh.io/d/github.com/cloudfoundry-incubator/cf-routing-release?v=0.179.0"
    }, 
    "runtime_test_release": {
      "is_bosh_release": true, 
      "name": "runtime_test_release", 
      "package-type": "bosh-release", 
      "path": "resources/runtime-test-release.tgz", 
      "properties": {
        "runtime_test_release": {
          "name": "runtime_test_release"
        }
      }
    }, 
    "test-tile": {
      "consumes": {
        "docker-tcp": {
          "from": "docker"
        }, 
        "nats": {
          "deployment": "(( ..cf.deployment_name ))", 
          "from": "nats"
        }, 
        "redis": {
          "from": "redis"
        }
      }, 
      "consumes_for_deployment": {
        "docker-tcp": {
          "from": "docker"
        }, 
        "nats": {
          "deployment": "(( ..cf.deployment_name ))", 
          "from": "nats"
        }, 
        "redis": {
          "from": "redis"
        }
      }, 
      "is_cf": true, 
      "jobs": [
        {
          "lifecycle": "errand", 
          "manifest": {
            "allow_paid_service_plans": "(( .properties.allow_paid_service_plans.value ))", 
            "app_domains": [
              "(( ..cf.cloud_controller.apps_domain.value ))"
            ], 
            "app_instances": "(( .properties.app_instances.value ))", 
            "apply_open_security_group": "(( .properties.apply_open_security_group.value ))", 
            "author": "(( .properties.author.value ))", 
            "auto_service_name": "(( .properties.auto_service_name.value ))", 
            "canary_watch_timeout": "(( .properties.canary_watch_timeout.value ))", 
            "cf": {
              "admin_password": "(( ..cf.uaa.system_services_credentials.password ))", 
              "admin_user": "(( ..cf.uaa.system_services_credentials.identity ))"
            }, 
            "city": "(( .properties.city.value ))", 
            "country": "(( .properties.country.value ))", 
            "custom_dynamic_service_plan_1": "(( .properties.custom_dynamic_service_plan_1.value ))", 
            "custom_dynamic_service_plan_2": "(( .properties.custom_dynamic_service_plan_2.value ))", 
            "customer_name": "(( .properties.customer_name.value ))", 
            "domain": "(( ..cf.cloud_controller.system_domain.value ))", 
            "example_collection": "(( .properties.example_collection.value ))", 
            "example_selector": {
              "selected_option": "(( .properties.example_selector.selected_option.parsed_manifest(manifest_snippet) ))", 
              "value": "(( .properties.example_selector.value ))"
            }, 
            "is_feature_enabled": {
              "selected_option": "(( .properties.is_feature_enabled.selected_option.parsed_manifest(manifest_snippet) ))", 
              "value": "(( .properties.is_feature_enabled.value ))"
            }, 
            "my_creds": {
              "identity": "(( .properties.my_creds.identity ))", 
              "password": "(( .properties.my_creds.password ))"
            }, 
            "opsman_ca": "(( $ops_manager.ca_certificate ))", 
            "org": "(( .properties.org.value ))", 
            "password": "(( .properties.password.value ))", 
            "planets": "(( .properties.planets.value ))", 
            "runtime_test_release": {
              "name": "runtime_test_release"
            }, 
            "security": {
              "password": "(( .deploy-all.app_credentials.password ))", 
              "user": "(( .deploy-all.app_credentials.identity ))"
            }, 
            "space": "(( .properties.space.value ))", 
            "ssl": {
              "skip_cert_verify": "(( ..cf.ha_proxy.skip_cert_verify.value ))"
            }, 
            "street_address": "(( .properties.street_address.value ))", 
            "tg_test_app1": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "instances": "(( .properties.app_instances.value ))", 
                "memory": "256M", 
                "path": "app.zip"
              }, 
              "auto_services": [], 
              "name": "tg_test_app1"
            }, 
            "tg_test_app1_auto_zip": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "memory": "256M", 
                "path": "app"
              }, 
              "auto_services": [], 
              "name": "tg_test_app1_auto_zip"
            }, 
            "tg_test_app2": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "host": "tg-test-app2-hostname", 
                "memory": "256M", 
                "path": "app.zip"
              }, 
              "auto_services": [
                {
                  "name": "tg-test-broker1-service", 
                  "plan": "first-plan"
                }, 
                {
                  "name": "(( .properties.auto_service_name.value ))"
                }
              ], 
              "name": "tg_test_app2"
            }, 
            "tg_test_app3": {
              "app_manifest": {
                "memory": "256M"
              }, 
              "auto_services": [
                {
                  "name": "tg-test-broker1-service", 
                  "plan": "second-plan", 
                  "service_instance": "tg-test-svc"
                }
              ], 
              "name": "tg_test_app3"
            }, 
            "tg_test_app4": {
              "name": "tg_test_app4"
            }, 
            "tg_test_app5": {
              "name": "tg_test_app5"
            }, 
            "tg_test_app6": {
              "name": "tg_test_app6"
            }, 
            "tg_test_app7": {
              "name": "tg_test_app7"
            }, 
            "tg_test_binary_app": {
              "app_manifest": {
                "buildpack": "binary_buildpack", 
                "command": "./binary-app.py", 
                "memory": "256M", 
                "path": "binary-app.py"
              }, 
              "auto_services": [], 
              "name": "tg_test_binary_app"
            }, 
            "tg_test_broker1": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "memory": "256M", 
                "path": "app.zip"
              }, 
              "auto_services": [], 
              "enable_global_access_to_plans": "(( .properties.tg_test_broker1_enable_global_access_to_plans.value ))", 
              "name": "tg_test_broker1", 
              "password": "(( .deploy-all.app_credentials.password ))", 
              "user": "(( .deploy-all.app_credentials.identity ))"
            }, 
            "tg_test_broker2": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "memory": "256M", 
                "path": "app.zip"
              }, 
              "auto_services": [], 
              "enable_global_access_to_plans": "(( .properties.tg_test_broker2_enable_global_access_to_plans.value ))", 
              "name": "tg_test_broker2", 
              "password": "(( .deploy-all.app_credentials.password ))", 
              "user": "(( .deploy-all.app_credentials.identity ))"
            }, 
            "tg_test_buildpack": {
              "buildpack_order": "(( .properties.tg_test_buildpack_buildpack_order.value ))", 
              "name": "tg_test_buildpack"
            }, 
            "uaa": {
              "admin_client": "(( ..cf.uaa.admin_client_credentials.identity ))", 
              "admin_client_secret": "(( ..cf.uaa.admin_client_credentials.password ))"
            }, 
            "update_watch_timeout": "(( .properties.update_watch_timeout.value ))", 
            "username": "(( .properties.username.value ))", 
            "zip_code": "(( .properties.zip_code.value ))"
          }, 
          "name": "deploy-all", 
          "packages": [
            {
              "name": "cf_cli"
            }
          ], 
          "post_deploy": true, 
          "properties": {}, 
          "template": "deploy-all", 
          "type": "deploy-all"
        }, 
        {
          "lifecycle": "errand", 
          "manifest": {
            "allow_paid_service_plans": "(( .properties.allow_paid_service_plans.value ))", 
            "app_domains": [
              "(( ..cf.cloud_controller.apps_domain.value ))"
            ], 
            "app_instances": "(( .properties.app_instances.value ))", 
            "apply_open_security_group": "(( .properties.apply_open_security_group.value ))", 
            "author": "(( .properties.author.value ))", 
            "auto_service_name": "(( .properties.auto_service_name.value ))", 
            "canary_watch_timeout": "(( .properties.canary_watch_timeout.value ))", 
            "cf": {
              "admin_password": "(( ..cf.uaa.system_services_credentials.password ))", 
              "admin_user": "(( ..cf.uaa.system_services_credentials.identity ))"
            }, 
            "city": "(( .properties.city.value ))", 
            "country": "(( .properties.country.value ))", 
            "custom_dynamic_service_plan_1": "(( .properties.custom_dynamic_service_plan_1.value ))", 
            "custom_dynamic_service_plan_2": "(( .properties.custom_dynamic_service_plan_2.value ))", 
            "customer_name": "(( .properties.customer_name.value ))", 
            "domain": "(( ..cf.cloud_controller.system_domain.value ))", 
            "example_collection": "(( .properties.example_collection.value ))", 
            "example_selector": {
              "selected_option": "(( .properties.example_selector.selected_option.parsed_manifest(manifest_snippet) ))", 
              "value": "(( .properties.example_selector.value ))"
            }, 
            "is_feature_enabled": {
              "selected_option": "(( .properties.is_feature_enabled.selected_option.parsed_manifest(manifest_snippet) ))", 
              "value": "(( .properties.is_feature_enabled.value ))"
            }, 
            "my_creds": {
              "identity": "(( .properties.my_creds.identity ))", 
              "password": "(( .properties.my_creds.password ))"
            }, 
            "opsman_ca": "(( $ops_manager.ca_certificate ))", 
            "org": "(( .properties.org.value ))", 
            "password": "(( .properties.password.value ))", 
            "planets": "(( .properties.planets.value ))", 
            "runtime_test_release": {
              "name": "runtime_test_release"
            }, 
            "space": "(( .properties.space.value ))", 
            "ssl": {
              "skip_cert_verify": "(( ..cf.ha_proxy.skip_cert_verify.value ))"
            }, 
            "street_address": "(( .properties.street_address.value ))", 
            "tg_test_app1": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "instances": "(( .properties.app_instances.value ))", 
                "memory": "256M", 
                "path": "app.zip"
              }, 
              "auto_services": [], 
              "name": "tg_test_app1"
            }, 
            "tg_test_app1_auto_zip": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "memory": "256M", 
                "path": "app"
              }, 
              "auto_services": [], 
              "name": "tg_test_app1_auto_zip"
            }, 
            "tg_test_app2": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "host": "tg-test-app2-hostname", 
                "memory": "256M", 
                "path": "app.zip"
              }, 
              "auto_services": [
                {
                  "name": "tg-test-broker1-service", 
                  "plan": "first-plan"
                }, 
                {
                  "name": "(( .properties.auto_service_name.value ))"
                }
              ], 
              "name": "tg_test_app2"
            }, 
            "tg_test_app3": {
              "app_manifest": {
                "memory": "256M"
              }, 
              "auto_services": [
                {
                  "name": "tg-test-broker1-service", 
                  "plan": "second-plan", 
                  "service_instance": "tg-test-svc"
                }
              ], 
              "name": "tg_test_app3"
            }, 
            "tg_test_app4": {
              "name": "tg_test_app4"
            }, 
            "tg_test_app5": {
              "name": "tg_test_app5"
            }, 
            "tg_test_app6": {
              "name": "tg_test_app6"
            }, 
            "tg_test_app7": {
              "name": "tg_test_app7"
            }, 
            "tg_test_binary_app": {
              "app_manifest": {
                "buildpack": "binary_buildpack", 
                "command": "./binary-app.py", 
                "memory": "256M", 
                "path": "binary-app.py"
              }, 
              "auto_services": [], 
              "name": "tg_test_binary_app"
            }, 
            "tg_test_broker1": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "memory": "256M", 
                "path": "app.zip"
              }, 
              "auto_services": [], 
              "enable_global_access_to_plans": "(( .properties.tg_test_broker1_enable_global_access_to_plans.value ))", 
              "name": "tg_test_broker1"
            }, 
            "tg_test_broker2": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "memory": "256M", 
                "path": "app.zip"
              }, 
              "auto_services": [], 
              "enable_global_access_to_plans": "(( .properties.tg_test_broker2_enable_global_access_to_plans.value ))", 
              "name": "tg_test_broker2"
            }, 
            "tg_test_buildpack": {
              "buildpack_order": "(( .properties.tg_test_buildpack_buildpack_order.value ))", 
              "name": "tg_test_buildpack"
            }, 
            "uaa": {
              "admin_client": "(( ..cf.uaa.admin_client_credentials.identity ))", 
              "admin_client_secret": "(( ..cf.uaa.admin_client_credentials.password ))"
            }, 
            "update_watch_timeout": "(( .properties.update_watch_timeout.value ))", 
            "username": "(( .properties.username.value ))", 
            "zip_code": "(( .properties.zip_code.value ))"
          }, 
          "name": "delete-all", 
          "packages": [
            {
              "name": "cf_cli"
            }
          ], 
          "pre_delete": true, 
          "properties": {}, 
          "template": "delete-all", 
          "type": "delete-all"
        }, 
        {
          "manifest": {
            "allow_paid_service_plans": "(( .properties.allow_paid_service_plans.value ))", 
            "app_domains": [
              "(( ..cf.cloud_controller.apps_domain.value ))"
            ], 
            "app_instances": "(( .properties.app_instances.value ))", 
            "apply_open_security_group": "(( .properties.apply_open_security_group.value ))", 
            "author": "(( .properties.author.value ))", 
            "auto_service_name": "(( .properties.auto_service_name.value ))", 
            "canary_watch_timeout": "(( .properties.canary_watch_timeout.value ))", 
            "cf": {
              "admin_password": "(( ..cf.uaa.system_services_credentials.password ))", 
              "admin_user": "(( ..cf.uaa.system_services_credentials.identity ))"
            }, 
            "city": "(( .properties.city.value ))", 
            "country": "(( .properties.country.value ))", 
            "custom_dynamic_service_plan_1": "(( .properties.custom_dynamic_service_plan_1.value ))", 
            "custom_dynamic_service_plan_2": "(( .properties.custom_dynamic_service_plan_2.value ))", 
            "customer_name": "(( .properties.customer_name.value ))", 
            "domain": "(( ..cf.cloud_controller.system_domain.value ))", 
            "example_collection": "(( .properties.example_collection.value ))", 
            "example_selector": {
              "selected_option": "(( .properties.example_selector.selected_option.parsed_manifest(manifest_snippet) ))", 
              "value": "(( .properties.example_selector.value ))"
            }, 
            "is_feature_enabled": {
              "selected_option": "(( .properties.is_feature_enabled.selected_option.parsed_manifest(manifest_snippet) ))", 
              "value": "(( .properties.is_feature_enabled.value ))"
            }, 
            "my_creds": {
              "identity": "(( .properties.my_creds.identity ))", 
              "password": "(( .properties.my_creds.password ))"
            }, 
            "opsman_ca": "(( $ops_manager.ca_certificate ))", 
            "org": "(( .properties.org.value ))", 
            "password": "(( .properties.password.value ))", 
            "planets": "(( .properties.planets.value ))", 
            "runtime_test_release": {
              "name": "runtime_test_release"
            }, 
            "security": {
              "password": "(( .deploy-all.app_credentials.password ))", 
              "user": "(( .deploy-all.app_credentials.identity ))"
            }, 
            "space": "(( .properties.space.value ))", 
            "ssl": {
              "skip_cert_verify": "(( ..cf.ha_proxy.skip_cert_verify.value ))"
            }, 
            "street_address": "(( .properties.street_address.value ))", 
            "tg_test_app1": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "instances": "(( .properties.app_instances.value ))", 
                "memory": "256M", 
                "path": "app.zip"
              }, 
              "auto_services": [], 
              "name": "tg_test_app1"
            }, 
            "tg_test_app1_auto_zip": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "memory": "256M", 
                "path": "app"
              }, 
              "auto_services": [], 
              "name": "tg_test_app1_auto_zip"
            }, 
            "tg_test_app2": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "host": "tg-test-app2-hostname", 
                "memory": "256M", 
                "path": "app.zip"
              }, 
              "auto_services": [
                {
                  "name": "tg-test-broker1-service", 
                  "plan": "first-plan"
                }, 
                {
                  "name": "(( .properties.auto_service_name.value ))"
                }
              ], 
              "name": "tg_test_app2"
            }, 
            "tg_test_app3": {
              "app_manifest": {
                "memory": "256M"
              }, 
              "auto_services": [
                {
                  "name": "tg-test-broker1-service", 
                  "plan": "second-plan", 
                  "service_instance": "tg-test-svc"
                }
              ], 
              "name": "tg_test_app3"
            }, 
            "tg_test_app4": {
              "name": "tg_test_app4"
            }, 
            "tg_test_app5": {
              "name": "tg_test_app5"
            }, 
            "tg_test_app6": {
              "name": "tg_test_app6"
            }, 
            "tg_test_app7": {
              "name": "tg_test_app7"
            }, 
            "tg_test_binary_app": {
              "app_manifest": {
                "buildpack": "binary_buildpack", 
                "command": "./binary-app.py", 
                "memory": "256M", 
                "path": "binary-app.py"
              }, 
              "auto_services": [], 
              "name": "tg_test_binary_app"
            }, 
            "tg_test_broker1": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "memory": "256M", 
                "path": "app.zip"
              }, 
              "auto_services": [], 
              "enable_global_access_to_plans": "(( .properties.tg_test_broker1_enable_global_access_to_plans.value ))", 
              "name": "tg_test_broker1"
            }, 
            "tg_test_broker2": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "memory": "256M", 
                "path": "app.zip"
              }, 
              "auto_services": [], 
              "enable_global_access_to_plans": "(( .properties.tg_test_broker2_enable_global_access_to_plans.value ))", 
              "name": "tg_test_broker2"
            }, 
            "tg_test_buildpack": {
              "buildpack_order": "(( .properties.tg_test_buildpack_buildpack_order.value ))", 
              "name": "tg_test_buildpack"
            }, 
            "tls_cacert": "(( $ops_manager.ca_certificate ))", 
            "tls_cert": "(( .properties.generated_rsa_cert_credentials.cert_pem ))", 
            "tls_key": "(( .properties.generated_rsa_cert_credentials.private_key_pem ))", 
            "uaa": {
              "admin_client": "(( ..cf.uaa.admin_client_credentials.identity ))", 
              "admin_client_secret": "(( ..cf.uaa.admin_client_credentials.password ))"
            }, 
            "update_watch_timeout": "(( .properties.update_watch_timeout.value ))", 
            "username": "(( .properties.username.value ))", 
            "zip_code": "(( .properties.zip_code.value ))"
          }, 
          "name": "docker-bosh-tg_test_app4", 
          "package": {
            "cpu": 2, 
            "docker_images": [
              "guidowb/sample-cf-app"
            ], 
            "ephemeral_disk": 4096, 
            "files": [
              {
                "name": "guidowb-sample-cf-app.tgz", 
                "path": "docker:guidowb/sample-cf-app"
              }
            ], 
            "instances": 1, 
            "is_docker": true, 
            "manifest": {
              "containers": [
                {
                  "bind_ports": [
                    "80:80", 
                    "443:443", 
                    "8080:8080", 
                    "8443:8443"
                  ], 
                  "env_file": [
                    "/var/vcap/jobs/docker-bosh-tg_test_app4/bin/opsmgr.env"
                  ], 
                  "image": "guidowb/sample-cf-app", 
                  "name": "app", 
                  "volumes": [
                    "/var/vcap/data/certs:/mnt/certs/opsman-certs:ro", 
                    "/usr/local/share/ca-certificates:/mnt/certs/host-ca-certs:ro"
                  ]
                }
              ]
            }, 
            "memory": 512, 
            "name": "tg_test_app4", 
            "package-type": "docker-bosh", 
            "persistent_disk": 2048, 
            "properties": {
              "tg_test_app4": {
                "name": "tg_test_app4"
              }
            }, 
            "routes": [
              {
                "port": 8080, 
                "prefix": "my-route"
              }
            ]
          }, 
          "properties": {
            "security": {
              "password": "(( .deploy-all.app_credentials.password ))", 
              "user": "(( .deploy-all.app_credentials.identity ))"
            }, 
            "tls_cacert": "(( $ops_manager.ca_certificate ))", 
            "tls_cert": "(( .properties.generated_rsa_cert_credentials.cert_pem ))", 
            "tls_key": "(( .properties.generated_rsa_cert_credentials.private_key_pem ))"
          }, 
          "template": "docker-bosh", 
          "type": "docker-bosh-tg_test_app4"
        }
      ], 
      "name": "test-tile", 
      "packages": [
        {
          "app_manifest": {
            "buildpack": "python_buildpack", 
            "command": "python app.py", 
            "instances": "(( .properties.app_instances.value ))", 
            "memory": "256M", 
            "path": "app.zip"
          }, 
          "files": [
            {
              "name": "app.zip", 
              "path": "resources/app.zip"
            }
          ], 
          "is_app": true, 
          "is_cf": true, 
          "manifest": {
            "buildpack": "python_buildpack", 
            "command": "python app.py", 
            "instances": "(( .properties.app_instances.value ))", 
            "memory": "256M", 
            "path": "app.zip"
          }, 
          "name": "tg_test_app1", 
          "package-type": "app", 
          "properties": {
            "tg_test_app1": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "instances": "(( .properties.app_instances.value ))", 
                "memory": "256M", 
                "path": "app.zip"
              }, 
              "auto_services": [], 
              "name": "tg_test_app1"
            }
          }
        }, 
        {
          "dir": "blobs", 
          "files": [
            {
              "name": "cf-linux-amd64.tgz", 
              "path": "http://cli.run.pivotal.io/stable?release=linux64-binary&source=github-rel", 
              "untar": true
            }, 
            {
              "name": "all_open.json", 
              "path": "/Users/mboldt/pivotal/tile-generator/tile_generator/templates/src/templates/all_open.json"
            }
          ], 
          "name": "cf_cli"
        }, 
        {
          "app_manifest": {
            "buildpack": "python_buildpack", 
            "command": "python app.py", 
            "memory": "256M", 
            "path": "app"
          }, 
          "files": [
            {
              "name": "app", 
              "path": "src/app"
            }
          ], 
          "is_app": true, 
          "is_cf": true, 
          "manifest": {
            "buildpack": "python_buildpack", 
            "command": "python app.py", 
            "memory": "256M", 
            "path": "app"
          }, 
          "name": "tg_test_app1_auto_zip", 
          "package-type": "app", 
          "properties": {
            "tg_test_app1_auto_zip": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "memory": "256M", 
                "path": "app"
              }, 
              "auto_services": [], 
              "name": "tg_test_app1_auto_zip"
            }
          }
        }, 
        {
          "app_manifest": {
            "buildpack": "binary_buildpack", 
            "command": "./binary-app.py", 
            "memory": "256M", 
            "path": "binary-app.py"
          }, 
          "files": [
            {
              "name": "binary-app.py", 
              "path": "src/binary-app/binary-app.py"
            }
          ], 
          "is_app": true, 
          "is_cf": true, 
          "manifest": {
            "buildpack": "binary_buildpack", 
            "command": "./binary-app.py", 
            "memory": "256M", 
            "path": "binary-app.py"
          }, 
          "name": "tg_test_binary_app", 
          "package-type": "app", 
          "properties": {
            "tg_test_binary_app": {
              "app_manifest": {
                "buildpack": "binary_buildpack", 
                "command": "./binary-app.py", 
                "memory": "256M", 
                "path": "binary-app.py"
              }, 
              "auto_services": [], 
              "name": "tg_test_binary_app"
            }
          }
        }, 
        {
          "app_manifest": {
            "buildpack": "python_buildpack", 
            "command": "python app.py", 
            "memory": "256M", 
            "path": "app.zip"
          }, 
          "enable_global_access_to_plans": true, 
          "files": [
            {
              "name": "app.zip", 
              "path": "resources/app.zip"
            }
          ], 
          "is_app": true, 
          "is_broker": true, 
          "is_cf": true, 
          "manifest": {
            "buildpack": "python_buildpack", 
            "command": "python app.py", 
            "memory": "256M", 
            "path": "app.zip"
          }, 
          "name": "tg_test_broker1", 
          "package-type": "app-broker", 
          "properties": {
            "tg_test_broker1": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "memory": "256M", 
                "path": "app.zip"
              }, 
              "auto_services": [], 
              "enable_global_access_to_plans": "(( .properties.tg_test_broker1_enable_global_access_to_plans.value ))", 
              "name": "tg_test_broker1"
            }
          }
        }, 
        {
          "app_manifest": {
            "buildpack": "python_buildpack", 
            "command": "python app.py", 
            "host": "tg-test-app2-hostname", 
            "memory": "256M", 
            "path": "app.zip"
          }, 
          "auto_services": [
            {
              "name": "tg-test-broker1-service", 
              "plan": "first-plan"
            }, 
            {
              "name": "(( .properties.auto_service_name.value ))"
            }
          ], 
          "consumes": {
            "docker-tcp": {
              "from": "docker"
            }, 
            "nats": {
              "deployment": "(( ..cf.deployment_name ))", 
              "from": "nats"
            }, 
            "redis": {
              "from": "redis"
            }
          }, 
          "files": [
            {
              "name": "app.zip", 
              "path": "resources/app.zip"
            }
          ], 
          "health_check": "none", 
          "is_app": true, 
          "is_cf": true, 
          "manifest": {
            "buildpack": "python_buildpack", 
            "command": "python app.py", 
            "host": "tg-test-app2-hostname", 
            "memory": "256M", 
            "path": "app.zip"
          }, 
          "name": "tg_test_app2", 
          "needs_cf_credentials": true, 
          "package-type": "app", 
          "properties": {
            "tg_test_app2": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "host": "tg-test-app2-hostname", 
                "memory": "256M", 
                "path": "app.zip"
              }, 
              "auto_services": [
                {
                  "name": "tg-test-broker1-service", 
                  "plan": "first-plan"
                }, 
                {
                  "name": "(( .properties.auto_service_name.value ))"
                }
              ], 
              "name": "tg_test_app2"
            }
          }
        }, 
        {
          "app_manifest": {
            "buildpack": "python_buildpack", 
            "command": "python app.py", 
            "memory": "256M", 
            "path": "app.zip"
          }, 
          "consumes": {
            "nats": {
              "deployment": "(( ..cf.deployment_name ))", 
              "from": "nats"
            }, 
            "redis": {
              "from": "redis"
            }
          }, 
          "files": [
            {
              "name": "app.zip", 
              "path": "resources/app.zip"
            }
          ], 
          "internal_service_names": [
            "service1", 
            "service2"
          ], 
          "is_app": true, 
          "is_broker": true, 
          "is_cf": true, 
          "manifest": {
            "buildpack": "python_buildpack", 
            "command": "python app.py", 
            "memory": "256M", 
            "path": "app.zip"
          }, 
          "name": "tg_test_broker2", 
          "package-type": "app-broker", 
          "properties": {
            "tg_test_broker2": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "memory": "256M", 
                "path": "app.zip"
              }, 
              "auto_services": [], 
              "enable_global_access_to_plans": "(( .properties.tg_test_broker2_enable_global_access_to_plans.value ))", 
              "name": "tg_test_broker2"
            }
          }
        }, 
        {
          "buildpack_order": 99, 
          "files": [
            {
              "name": "buildpack.zip", 
              "path": "resources/buildpack.zip"
            }
          ], 
          "is_buildpack": true, 
          "is_cf": true, 
          "name": "tg_test_buildpack", 
          "package-type": "buildpack", 
          "path": "buildpack.zip", 
          "properties": {
            "tg_test_buildpack": {
              "buildpack_order": "(( .properties.tg_test_buildpack_buildpack_order.value ))", 
              "name": "tg_test_buildpack"
            }
          }
        }, 
        {
          "app_manifest": {
            "memory": "256M"
          }, 
          "auto_services": [
            {
              "name": "tg-test-broker1-service", 
              "plan": "second-plan", 
              "service_instance": "tg-test-svc"
            }
          ], 
          "files": [], 
          "image": "guidowb/sample-cf-app", 
          "is_app": true, 
          "is_cf": true, 
          "is_docker": true, 
          "is_docker_app": true, 
          "manifest": {
            "memory": "256M"
          }, 
          "name": "tg_test_app3", 
          "package-type": "docker-app", 
          "properties": {
            "tg_test_app3": {
              "app_manifest": {
                "memory": "256M"
              }, 
              "auto_services": [
                {
                  "name": "tg-test-broker1-service", 
                  "plan": "second-plan", 
                  "service_instance": "tg-test-svc"
                }
              ], 
              "name": "tg_test_app3"
            }
          }
        }, 
        {
          "cpu": 2, 
          "docker_images": [
            "guidowb/sample-cf-app"
          ], 
          "ephemeral_disk": 4096, 
          "files": [
            {
              "name": "guidowb-sample-cf-app.tgz", 
              "path": "docker:guidowb/sample-cf-app"
            }
          ], 
          "instances": 1, 
          "is_docker": true, 
          "manifest": {
            "containers": [
              {
                "bind_ports": [
                  "80:80", 
                  "443:443", 
                  "8080:8080", 
                  "8443:8443"
                ], 
                "env_file": [
                  "/var/vcap/jobs/docker-bosh-tg_test_app4/bin/opsmgr.env"
                ], 
                "image": "guidowb/sample-cf-app", 
                "name": "app", 
                "volumes": [
                  "/var/vcap/data/certs:/mnt/certs/opsman-certs:ro", 
                  "/usr/local/share/ca-certificates:/mnt/certs/host-ca-certs:ro"
                ]
              }
            ]
          }, 
          "memory": 512, 
          "name": "tg_test_app4", 
          "package-type": "docker-bosh", 
          "persistent_disk": 2048, 
          "properties": {
            "tg_test_app4": {
              "name": "tg_test_app4"
            }
          }, 
          "routes": [
            {
              "port": 8080, 
              "prefix": "my-route"
            }
          ]
        }, 
        {
          "dir": "src", 
          "files": [
            {
              "name": "utils.sh", 
              "path": "/Users/mboldt/pivotal/tile-generator/tile_generator/templates/src/common/utils.sh"
            }
          ], 
          "name": "common"
        }
      ], 
      "requires_docker_bosh": true
    }, 
    "tg_test_app5": {
      "is_bosh_release": true, 
      "jobs": [
        {
          "cpu": 2, 
          "default_internet_connected": false, 
          "dynamic_ip": 1, 
          "ephemeral_disk": 4096, 
          "instances": 2, 
          "manifest": {
            "allow_paid_service_plans": "(( .properties.allow_paid_service_plans.value ))", 
            "app_domains": [
              "(( ..cf.cloud_controller.apps_domain.value ))"
            ], 
            "app_instances": "(( .properties.app_instances.value ))", 
            "apply_open_security_group": "(( .properties.apply_open_security_group.value ))", 
            "author": "(( .properties.author.value ))", 
            "auto_service_name": "(( .properties.auto_service_name.value ))", 
            "canary_watch_timeout": "(( .properties.canary_watch_timeout.value ))", 
            "cf": {
              "admin_password": "(( ..cf.uaa.system_services_credentials.password ))", 
              "admin_user": "(( ..cf.uaa.system_services_credentials.identity ))"
            }, 
            "city": "(( .properties.city.value ))", 
            "country": "(( .properties.country.value ))", 
            "custom_dynamic_service_plan_1": "(( .properties.custom_dynamic_service_plan_1.value ))", 
            "custom_dynamic_service_plan_2": "(( .properties.custom_dynamic_service_plan_2.value ))", 
            "customer_name": "(( .properties.customer_name.value ))", 
            "domain": "(( ..cf.cloud_controller.system_domain.value ))", 
            "example_collection": "(( .properties.example_collection.value ))", 
            "example_selector": {
              "selected_option": "(( .properties.example_selector.selected_option.parsed_manifest(manifest_snippet) ))", 
              "value": "(( .properties.example_selector.value ))"
            }, 
            "is_feature_enabled": {
              "selected_option": "(( .properties.is_feature_enabled.selected_option.parsed_manifest(manifest_snippet) ))", 
              "value": "(( .properties.is_feature_enabled.value ))"
            }, 
            "my_creds": {
              "identity": "(( .properties.my_creds.identity ))", 
              "password": "(( .properties.my_creds.password ))"
            }, 
            "opsman_ca": "(( $ops_manager.ca_certificate ))", 
            "org": "(( .properties.org.value ))", 
            "password": "(( .properties.password.value ))", 
            "planets": "(( .properties.planets.value ))", 
            "runtime_test_release": {
              "name": "runtime_test_release"
            }, 
            "space": "(( .properties.space.value ))", 
            "ssl": {
              "skip_cert_verify": "(( ..cf.ha_proxy.skip_cert_verify.value ))"
            }, 
            "street_address": "(( .properties.street_address.value ))", 
            "tg_test_app1": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "instances": "(( .properties.app_instances.value ))", 
                "memory": "256M", 
                "path": "app.zip"
              }, 
              "auto_services": [], 
              "name": "tg_test_app1"
            }, 
            "tg_test_app1_auto_zip": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "memory": "256M", 
                "path": "app"
              }, 
              "auto_services": [], 
              "name": "tg_test_app1_auto_zip"
            }, 
            "tg_test_app2": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "host": "tg-test-app2-hostname", 
                "memory": "256M", 
                "path": "app.zip"
              }, 
              "auto_services": [
                {
                  "name": "tg-test-broker1-service", 
                  "plan": "first-plan"
                }, 
                {
                  "name": "(( .properties.auto_service_name.value ))"
                }
              ], 
              "name": "tg_test_app2"
            }, 
            "tg_test_app3": {
              "app_manifest": {
                "memory": "256M"
              }, 
              "auto_services": [
                {
                  "name": "tg-test-broker1-service", 
                  "plan": "second-plan", 
                  "service_instance": "tg-test-svc"
                }
              ], 
              "name": "tg_test_app3"
            }, 
            "tg_test_app4": {
              "name": "tg_test_app4"
            }, 
            "tg_test_app5": {
              "name": "tg_test_app5"
            }, 
            "tg_test_app6": {
              "name": "tg_test_app6"
            }, 
            "tg_test_app7": {
              "name": "tg_test_app7"
            }, 
            "tg_test_binary_app": {
              "app_manifest": {
                "buildpack": "binary_buildpack", 
                "command": "./binary-app.py", 
                "memory": "256M", 
                "path": "binary-app.py"
              }, 
              "auto_services": [], 
              "name": "tg_test_binary_app"
            }, 
            "tg_test_broker1": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "memory": "256M", 
                "path": "app.zip"
              }, 
              "auto_services": [], 
              "enable_global_access_to_plans": "(( .properties.tg_test_broker1_enable_global_access_to_plans.value ))", 
              "name": "tg_test_broker1"
            }, 
            "tg_test_broker2": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "memory": "256M", 
                "path": "app.zip"
              }, 
              "auto_services": [], 
              "enable_global_access_to_plans": "(( .properties.tg_test_broker2_enable_global_access_to_plans.value ))", 
              "name": "tg_test_broker2"
            }, 
            "tg_test_buildpack": {
              "buildpack_order": "(( .properties.tg_test_buildpack_buildpack_order.value ))", 
              "name": "tg_test_buildpack"
            }, 
            "uaa": {
              "admin_client": "(( ..cf.uaa.admin_client_credentials.identity ))", 
              "admin_client_secret": "(( ..cf.uaa.admin_client_credentials.password ))"
            }, 
            "update_watch_timeout": "(( .properties.update_watch_timeout.value ))", 
            "username": "(( .properties.username.value ))", 
            "zip_code": "(( .properties.zip_code.value ))"
          }, 
          "max_in_flight": 1, 
          "memory": 512, 
          "name": "redis", 
          "persistent_disk": 4096, 
          "properties": {
            "password": "red!s"
          }, 
          "static_ip": 0, 
          "template": "redis", 
          "templates": [
            {
              "name": "redis", 
              "release": "redis"
            }
          ], 
          "type": "redis", 
          "varname": "redis"
        }, 
        {
          "cpu": 2, 
          "dynamic_ip": 1, 
          "ephemeral_disk": 4096, 
          "lifecycle": "errand", 
          "manifest": {
            "allow_paid_service_plans": "(( .properties.allow_paid_service_plans.value ))", 
            "app_domains": [
              "(( ..cf.cloud_controller.apps_domain.value ))"
            ], 
            "app_instances": "(( .properties.app_instances.value ))", 
            "apply_open_security_group": "(( .properties.apply_open_security_group.value ))", 
            "author": "(( .properties.author.value ))", 
            "auto_service_name": "(( .properties.auto_service_name.value ))", 
            "canary_watch_timeout": "(( .properties.canary_watch_timeout.value ))", 
            "cf": {
              "admin_password": "(( ..cf.uaa.system_services_credentials.password ))", 
              "admin_user": "(( ..cf.uaa.system_services_credentials.identity ))", 
              "some": "property"
            }, 
            "city": "(( .properties.city.value ))", 
            "country": "(( .properties.country.value ))", 
            "custom_dynamic_service_plan_1": "(( .properties.custom_dynamic_service_plan_1.value ))", 
            "custom_dynamic_service_plan_2": "(( .properties.custom_dynamic_service_plan_2.value ))", 
            "customer_name": "(( .properties.customer_name.value ))", 
            "domain": "(( ..cf.cloud_controller.system_domain.value ))", 
            "example_collection": "(( .properties.example_collection.value ))", 
            "example_selector": {
              "selected_option": "(( .properties.example_selector.selected_option.parsed_manifest(manifest_snippet) ))", 
              "value": "(( .properties.example_selector.value ))"
            }, 
            "is_feature_enabled": {
              "selected_option": "(( .properties.is_feature_enabled.selected_option.parsed_manifest(manifest_snippet) ))", 
              "value": "(( .properties.is_feature_enabled.value ))"
            }, 
            "my_creds": {
              "identity": "(( .properties.my_creds.identity ))", 
              "password": "(( .properties.my_creds.password ))"
            }, 
            "opsman_ca": "(( $ops_manager.ca_certificate ))", 
            "org": "(( .properties.org.value ))", 
            "password": "(( .properties.password.value ))", 
            "planets": "(( .properties.planets.value ))", 
            "runtime_test_release": {
              "name": "runtime_test_release"
            }, 
            "space": "(( .properties.space.value ))", 
            "ssl": {
              "skip_cert_verify": "(( ..cf.ha_proxy.skip_cert_verify.value ))"
            }, 
            "street_address": "(( .properties.street_address.value ))", 
            "tg_test_app1": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "instances": "(( .properties.app_instances.value ))", 
                "memory": "256M", 
                "path": "app.zip"
              }, 
              "auto_services": [], 
              "name": "tg_test_app1"
            }, 
            "tg_test_app1_auto_zip": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "memory": "256M", 
                "path": "app"
              }, 
              "auto_services": [], 
              "name": "tg_test_app1_auto_zip"
            }, 
            "tg_test_app2": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "host": "tg-test-app2-hostname", 
                "memory": "256M", 
                "path": "app.zip"
              }, 
              "auto_services": [
                {
                  "name": "tg-test-broker1-service", 
                  "plan": "first-plan"
                }, 
                {
                  "name": "(( .properties.auto_service_name.value ))"
                }
              ], 
              "name": "tg_test_app2"
            }, 
            "tg_test_app3": {
              "app_manifest": {
                "memory": "256M"
              }, 
              "auto_services": [
                {
                  "name": "tg-test-broker1-service", 
                  "plan": "second-plan", 
                  "service_instance": "tg-test-svc"
                }
              ], 
              "name": "tg_test_app3"
            }, 
            "tg_test_app4": {
              "name": "tg_test_app4"
            }, 
            "tg_test_app5": {
              "name": "tg_test_app5"
            }, 
            "tg_test_app6": {
              "name": "tg_test_app6"
            }, 
            "tg_test_app7": {
              "name": "tg_test_app7"
            }, 
            "tg_test_binary_app": {
              "app_manifest": {
                "buildpack": "binary_buildpack", 
                "command": "./binary-app.py", 
                "memory": "256M", 
                "path": "binary-app.py"
              }, 
              "auto_services": [], 
              "name": "tg_test_binary_app"
            }, 
            "tg_test_broker1": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "memory": "256M", 
                "path": "app.zip"
              }, 
              "auto_services": [], 
              "enable_global_access_to_plans": "(( .properties.tg_test_broker1_enable_global_access_to_plans.value ))", 
              "name": "tg_test_broker1"
            }, 
            "tg_test_broker2": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "memory": "256M", 
                "path": "app.zip"
              }, 
              "auto_services": [], 
              "enable_global_access_to_plans": "(( .properties.tg_test_broker2_enable_global_access_to_plans.value ))", 
              "name": "tg_test_broker2"
            }, 
            "tg_test_buildpack": {
              "buildpack_order": "(( .properties.tg_test_buildpack_buildpack_order.value ))", 
              "name": "tg_test_buildpack"
            }, 
            "uaa": {
              "admin_client": "(( ..cf.uaa.admin_client_credentials.identity ))", 
              "admin_client_secret": "(( ..cf.uaa.admin_client_credentials.password ))"
            }, 
            "update_watch_timeout": "(( .properties.update_watch_timeout.value ))", 
            "username": "(( .properties.username.value ))", 
            "zip_code": "(( .properties.zip_code.value ))"
          }, 
          "memory": 512, 
          "name": "sanity-tests", 
          "persistent_disk": 0, 
          "post_deploy": true, 
          "properties": {
            "cf": {
              "some": "property"
            }
          }, 
          "run_post_deploy_errand_default": "when-changed", 
          "template": "sanity-tests", 
          "templates": [
            {
              "name": "sanity-tests", 
              "release": "redis"
            }
          ], 
          "type": "sanity-tests", 
          "varname": "sanity_tests"
        }
      ], 
      "name": "tg_test_app5", 
      "package-type": "bosh-release", 
      "path": "resources/redis-13.1.2.tgz", 
      "properties": {
        "tg_test_app5": {
          "name": "tg_test_app5"
        }
      }
    }, 
    "tg_test_app6": {
      "is_bosh_release": true, 
      "jobs": [
        {
          "dynamic_ip": 1, 
          "instances": 1, 
          "manifest": {
            "allow_paid_service_plans": "(( .properties.allow_paid_service_plans.value ))", 
            "app_domains": [
              "(( ..cf.cloud_controller.apps_domain.value ))"
            ], 
            "app_instances": "(( .properties.app_instances.value ))", 
            "apply_open_security_group": "(( .properties.apply_open_security_group.value ))", 
            "author": "(( .properties.author.value ))", 
            "auto_service_name": "(( .properties.auto_service_name.value ))", 
            "canary_watch_timeout": "(( .properties.canary_watch_timeout.value ))", 
            "cf": {
              "admin_password": "(( ..cf.uaa.system_services_credentials.password ))", 
              "admin_user": "(( ..cf.uaa.system_services_credentials.identity ))"
            }, 
            "city": "(( .properties.city.value ))", 
            "country": "(( .properties.country.value ))", 
            "custom_dynamic_service_plan_1": "(( .properties.custom_dynamic_service_plan_1.value ))", 
            "custom_dynamic_service_plan_2": "(( .properties.custom_dynamic_service_plan_2.value ))", 
            "customer_name": "(( .properties.customer_name.value ))", 
            "domain": "(( ..cf.cloud_controller.system_domain.value ))", 
            "example_collection": "(( .properties.example_collection.value ))", 
            "example_selector": {
              "selected_option": "(( .properties.example_selector.selected_option.parsed_manifest(manifest_snippet) ))", 
              "value": "(( .properties.example_selector.value ))"
            }, 
            "is_feature_enabled": {
              "selected_option": "(( .properties.is_feature_enabled.selected_option.parsed_manifest(manifest_snippet) ))", 
              "value": "(( .properties.is_feature_enabled.value ))"
            }, 
            "my_creds": {
              "identity": "(( .properties.my_creds.identity ))", 
              "password": "(( .properties.my_creds.password ))"
            }, 
            "opsman_ca": "(( $ops_manager.ca_certificate ))", 
            "org": "(( .properties.org.value ))", 
            "password": "(( .properties.password.value ))", 
            "planets": "(( .properties.planets.value ))", 
            "route_registrar": {
              "routes": [
                {
                  "name": "runtime_conf_yes", 
                  "port": 8119, 
                  "registration_interval": "20s", 
                  "uris": [
                    "runtime-conf-yes.(( ..cf.cloud_controller.system_domain.value ))"
                  ]
                }
              ]
            }, 
            "runtime_test_release": {
              "name": "runtime_test_release"
            }, 
            "space": "(( .properties.space.value ))", 
            "ssl": {
              "skip_cert_verify": "(( ..cf.ha_proxy.skip_cert_verify.value ))"
            }, 
            "street_address": "(( .properties.street_address.value ))", 
            "tg_test_app1": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "instances": "(( .properties.app_instances.value ))", 
                "memory": "256M", 
                "path": "app.zip"
              }, 
              "auto_services": [], 
              "name": "tg_test_app1"
            }, 
            "tg_test_app1_auto_zip": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "memory": "256M", 
                "path": "app"
              }, 
              "auto_services": [], 
              "name": "tg_test_app1_auto_zip"
            }, 
            "tg_test_app2": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "host": "tg-test-app2-hostname", 
                "memory": "256M", 
                "path": "app.zip"
              }, 
              "auto_services": [
                {
                  "name": "tg-test-broker1-service", 
                  "plan": "first-plan"
                }, 
                {
                  "name": "(( .properties.auto_service_name.value ))"
                }
              ], 
              "name": "tg_test_app2"
            }, 
            "tg_test_app3": {
              "app_manifest": {
                "memory": "256M"
              }, 
              "auto_services": [
                {
                  "name": "tg-test-broker1-service", 
                  "plan": "second-plan", 
                  "service_instance": "tg-test-svc"
                }
              ], 
              "name": "tg_test_app3"
            }, 
            "tg_test_app4": {
              "name": "tg_test_app4"
            }, 
            "tg_test_app5": {
              "name": "tg_test_app5"
            }, 
            "tg_test_app6": {
              "name": "tg_test_app6"
            }, 
            "tg_test_app7": {
              "name": "tg_test_app7"
            }, 
            "tg_test_binary_app": {
              "app_manifest": {
                "buildpack": "binary_buildpack", 
                "command": "./binary-app.py", 
                "memory": "256M", 
                "path": "binary-app.py"
              }, 
              "auto_services": [], 
              "name": "tg_test_binary_app"
            }, 
            "tg_test_broker1": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "memory": "256M", 
                "path": "app.zip"
              }, 
              "auto_services": [], 
              "enable_global_access_to_plans": "(( .properties.tg_test_broker1_enable_global_access_to_plans.value ))", 
              "name": "tg_test_broker1"
            }, 
            "tg_test_broker2": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "memory": "256M", 
                "path": "app.zip"
              }, 
              "auto_services": [], 
              "enable_global_access_to_plans": "(( .properties.tg_test_broker2_enable_global_access_to_plans.value ))", 
              "name": "tg_test_broker2"
            }, 
            "tg_test_buildpack": {
              "buildpack_order": "(( .properties.tg_test_buildpack_buildpack_order.value ))", 
              "name": "tg_test_buildpack"
            }, 
            "uaa": {
              "admin_client": "(( ..cf.uaa.admin_client_credentials.identity ))", 
              "admin_client_secret": "(( ..cf.uaa.admin_client_credentials.password ))"
            }, 
            "update_watch_timeout": "(( .properties.update_watch_timeout.value ))", 
            "username": "(( .properties.username.value ))", 
            "zip_code": "(( .properties.zip_code.value ))"
          }, 
          "name": "node-yes", 
          "properties": {
            "route_registrar": {
              "routes": [
                {
                  "name": "runtime_conf_yes", 
                  "port": 8119, 
                  "registration_interval": "20s", 
                  "uris": [
                    "runtime-conf-yes.(( ..cf.cloud_controller.system_domain.value ))"
                  ]
                }
              ]
            }
          }, 
          "template": "node-yes", 
          "templates": [
            {
              "colocated": true, 
              "instances": [
                "node-yes/first"
              ], 
              "name": "no-op", 
              "post_deploy": true, 
              "release": "no-op-release", 
              "run_default": true
            }, 
            {
              "consumes": {
                "nats": {
                  "deployment": "(( ..cf.deployment_name ))", 
                  "from": "nats"
                }
              }, 
              "name": "route_registrar", 
              "release": "routing"
            }
          ], 
          "type": "node-yes", 
          "varname": "node_yes"
        }, 
        {
          "dynamic_ip": 1, 
          "instances": 1, 
          "manifest": {
            "allow_paid_service_plans": "(( .properties.allow_paid_service_plans.value ))", 
            "app_domains": [
              "(( ..cf.cloud_controller.apps_domain.value ))"
            ], 
            "app_instances": "(( .properties.app_instances.value ))", 
            "apply_open_security_group": "(( .properties.apply_open_security_group.value ))", 
            "author": "(( .properties.author.value ))", 
            "auto_service_name": "(( .properties.auto_service_name.value ))", 
            "canary_watch_timeout": "(( .properties.canary_watch_timeout.value ))", 
            "cf": {
              "admin_password": "(( ..cf.uaa.system_services_credentials.password ))", 
              "admin_user": "(( ..cf.uaa.system_services_credentials.identity ))"
            }, 
            "city": "(( .properties.city.value ))", 
            "country": "(( .properties.country.value ))", 
            "custom_dynamic_service_plan_1": "(( .properties.custom_dynamic_service_plan_1.value ))", 
            "custom_dynamic_service_plan_2": "(( .properties.custom_dynamic_service_plan_2.value ))", 
            "customer_name": "(( .properties.customer_name.value ))", 
            "domain": "(( ..cf.cloud_controller.system_domain.value ))", 
            "example_collection": "(( .properties.example_collection.value ))", 
            "example_selector": {
              "selected_option": "(( .properties.example_selector.selected_option.parsed_manifest(manifest_snippet) ))", 
              "value": "(( .properties.example_selector.value ))"
            }, 
            "is_feature_enabled": {
              "selected_option": "(( .properties.is_feature_enabled.selected_option.parsed_manifest(manifest_snippet) ))", 
              "value": "(( .properties.is_feature_enabled.value ))"
            }, 
            "my_creds": {
              "identity": "(( .properties.my_creds.identity ))", 
              "password": "(( .properties.my_creds.password ))"
            }, 
            "opsman_ca": "(( $ops_manager.ca_certificate ))", 
            "org": "(( .properties.org.value ))", 
            "password": "(( .properties.password.value ))", 
            "planets": "(( .properties.planets.value ))", 
            "route_registrar": {
              "routes": [
                {
                  "name": "runtime_conf_no", 
                  "port": 8119, 
                  "registration_interval": "20s", 
                  "uris": [
                    "runtime-conf-no.(( ..cf.cloud_controller.system_domain.value ))"
                  ]
                }
              ]
            }, 
            "runtime_test_release": {
              "name": "runtime_test_release"
            }, 
            "space": "(( .properties.space.value ))", 
            "ssl": {
              "skip_cert_verify": "(( ..cf.ha_proxy.skip_cert_verify.value ))"
            }, 
            "street_address": "(( .properties.street_address.value ))", 
            "tg_test_app1": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "instances": "(( .properties.app_instances.value ))", 
                "memory": "256M", 
                "path": "app.zip"
              }, 
              "auto_services": [], 
              "name": "tg_test_app1"
            }, 
            "tg_test_app1_auto_zip": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "memory": "256M", 
                "path": "app"
              }, 
              "auto_services": [], 
              "name": "tg_test_app1_auto_zip"
            }, 
            "tg_test_app2": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "host": "tg-test-app2-hostname", 
                "memory": "256M", 
                "path": "app.zip"
              }, 
              "auto_services": [
                {
                  "name": "tg-test-broker1-service", 
                  "plan": "first-plan"
                }, 
                {
                  "name": "(( .properties.auto_service_name.value ))"
                }
              ], 
              "name": "tg_test_app2"
            }, 
            "tg_test_app3": {
              "app_manifest": {
                "memory": "256M"
              }, 
              "auto_services": [
                {
                  "name": "tg-test-broker1-service", 
                  "plan": "second-plan", 
                  "service_instance": "tg-test-svc"
                }
              ], 
              "name": "tg_test_app3"
            }, 
            "tg_test_app4": {
              "name": "tg_test_app4"
            }, 
            "tg_test_app5": {
              "name": "tg_test_app5"
            }, 
            "tg_test_app6": {
              "name": "tg_test_app6"
            }, 
            "tg_test_app7": {
              "name": "tg_test_app7"
            }, 
            "tg_test_binary_app": {
              "app_manifest": {
                "buildpack": "binary_buildpack", 
                "command": "./binary-app.py", 
                "memory": "256M", 
                "path": "binary-app.py"
              }, 
              "auto_services": [], 
              "name": "tg_test_binary_app"
            }, 
            "tg_test_broker1": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "memory": "256M", 
                "path": "app.zip"
              }, 
              "auto_services": [], 
              "enable_global_access_to_plans": "(( .properties.tg_test_broker1_enable_global_access_to_plans.value ))", 
              "name": "tg_test_broker1"
            }, 
            "tg_test_broker2": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "memory": "256M", 
                "path": "app.zip"
              }, 
              "auto_services": [], 
              "enable_global_access_to_plans": "(( .properties.tg_test_broker2_enable_global_access_to_plans.value ))", 
              "name": "tg_test_broker2"
            }, 
            "tg_test_buildpack": {
              "buildpack_order": "(( .properties.tg_test_buildpack_buildpack_order.value ))", 
              "name": "tg_test_buildpack"
            }, 
            "uaa": {
              "admin_client": "(( ..cf.uaa.admin_client_credentials.identity ))", 
              "admin_client_secret": "(( ..cf.uaa.admin_client_credentials.password ))"
            }, 
            "update_watch_timeout": "(( .properties.update_watch_timeout.value ))", 
            "username": "(( .properties.username.value ))", 
            "zip_code": "(( .properties.zip_code.value ))"
          }, 
          "name": "node-no", 
          "properties": {
            "route_registrar": {
              "routes": [
                {
                  "name": "runtime_conf_no", 
                  "port": 8119, 
                  "registration_interval": "20s", 
                  "uris": [
                    "runtime-conf-no.(( ..cf.cloud_controller.system_domain.value ))"
                  ]
                }
              ]
            }
          }, 
          "template": "node-no", 
          "templates": [
            {
              "consumes": {
                "nats": {
                  "deployment": "(( ..cf.deployment_name ))", 
                  "from": "nats"
                }
              }, 
              "name": "route_registrar", 
              "release": "routing"
            }
          ], 
          "type": "node-no", 
          "varname": "node_no"
        }
      ], 
      "name": "tg_test_app6", 
      "package-type": "bosh-release", 
      "path": "resources/no-op-release.tgz", 
      "properties": {
        "tg_test_app6": {
          "name": "tg_test_app6"
        }
      }
    }, 
    "tg_test_app7": {
      "is_bosh_release": true, 
      "jobs": [
        {
          "dynamic_ip": 1, 
          "instances": 1, 
          "manifest": {
            "app_instances": "(( .properties.app_instances.value ))", 
            "author": "(( .properties.author.value ))", 
            "auto_service_name": "(( .properties.auto_service_name.value ))", 
            "canary_watch_timeout": "(( .properties.canary_watch_timeout.value ))", 
            "city": "(( .properties.city.value ))", 
            "country": "(( .properties.country.value ))", 
            "custom_dynamic_service_plan_1": "(( .properties.custom_dynamic_service_plan_1.value ))", 
            "custom_dynamic_service_plan_2": "(( .properties.custom_dynamic_service_plan_2.value ))", 
            "customer_name": "(( .properties.customer_name.value ))", 
            "example_collection": "(( .properties.example_collection.value ))", 
            "example_selector": {
              "selected_option": "(( .properties.example_selector.selected_option.parsed_manifest(manifest_snippet) ))", 
              "value": "(( .properties.example_selector.value ))"
            }, 
            "is_feature_enabled": {
              "selected_option": "(( .properties.is_feature_enabled.selected_option.parsed_manifest(manifest_snippet) ))", 
              "value": "(( .properties.is_feature_enabled.value ))"
            }, 
            "my_creds": {
              "identity": "(( .properties.my_creds.identity ))", 
              "password": "(( .properties.my_creds.password ))"
            }, 
            "password": "(( .properties.password.value ))", 
            "planets": "(( .properties.planets.value ))", 
            "runtime_test_release": {
              "name": "runtime_test_release"
            }, 
            "street_address": "(( .properties.street_address.value ))", 
            "tg_test_app1": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "instances": "(( .properties.app_instances.value ))", 
                "memory": "256M", 
                "path": "app.zip"
              }, 
              "auto_services": [], 
              "name": "tg_test_app1"
            }, 
            "tg_test_app1_auto_zip": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "memory": "256M", 
                "path": "app"
              }, 
              "auto_services": [], 
              "name": "tg_test_app1_auto_zip"
            }, 
            "tg_test_app2": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "host": "tg-test-app2-hostname", 
                "memory": "256M", 
                "path": "app.zip"
              }, 
              "auto_services": [
                {
                  "name": "tg-test-broker1-service", 
                  "plan": "first-plan"
                }, 
                {
                  "name": "(( .properties.auto_service_name.value ))"
                }
              ], 
              "name": "tg_test_app2"
            }, 
            "tg_test_app3": {
              "app_manifest": {
                "memory": "256M"
              }, 
              "auto_services": [
                {
                  "name": "tg-test-broker1-service", 
                  "plan": "second-plan", 
                  "service_instance": "tg-test-svc"
                }
              ], 
              "name": "tg_test_app3"
            }, 
            "tg_test_app4": {
              "name": "tg_test_app4"
            }, 
            "tg_test_app5": {
              "name": "tg_test_app5"
            }, 
            "tg_test_app6": {
              "name": "tg_test_app6"
            }, 
            "tg_test_app7": {
              "name": "tg_test_app7"
            }, 
            "tg_test_binary_app": {
              "app_manifest": {
                "buildpack": "binary_buildpack", 
                "command": "./binary-app.py", 
                "memory": "256M", 
                "path": "binary-app.py"
              }, 
              "auto_services": [], 
              "name": "tg_test_binary_app"
            }, 
            "tg_test_broker1": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "memory": "256M", 
                "path": "app.zip"
              }, 
              "auto_services": [], 
              "enable_global_access_to_plans": "(( .properties.tg_test_broker1_enable_global_access_to_plans.value ))", 
              "name": "tg_test_broker1"
            }, 
            "tg_test_broker2": {
              "app_manifest": {
                "buildpack": "python_buildpack", 
                "command": "python app.py", 
                "memory": "256M", 
                "path": "app.zip"
              }, 
              "auto_services": [], 
              "enable_global_access_to_plans": "(( .properties.tg_test_broker2_enable_global_access_to_plans.value ))", 
              "name": "tg_test_broker2"
            }, 
            "tg_test_buildpack": {
              "buildpack_order": "(( .properties.tg_test_buildpack_buildpack_order.value ))", 
              "name": "tg_test_buildpack"
            }, 
            "update_watch_timeout": "(( .properties.update_watch_timeout.value ))", 
            "username": "(( .properties.username.value ))", 
            "zip_code": "(( .properties.zip_code.value ))"
          }, 
          "name": "no-op", 
          "properties": {}, 
          "template": "standalone", 
          "templates": [
            {
              "name": "no-op", 
              "release": "standalone-release"
            }
          ], 
          "type": "standalone", 
          "varname": "no_op"
        }
      ], 
      "name": "tg_test_app7", 
      "package-type": "bosh-release", 
      "path": "resources/standalone-release.tgz", 
      "properties": {
        "tg_test_app7": {
          "name": "tg_test_app7"
        }
      }
    }
  }, 
  "requires_docker_bosh": true, 
  "requires_product_versions": [
    {
      "name": "cf", 
      "version": ">= 1.9"
    }
  ], 
  "runtime_configs": [
    {
      "name": "example-runtime-config", 
      "runtime_config": {
        "addons": [
          {
            "include": {
              "jobs": [
                {
                  "name": "no-op", 
                  "release": "no-op-release"
                }
              ]
            }, 
            "jobs": [
              {
                "name": "hello", 
                "release": "runtime-test-release"
              }
            ], 
            "name": "runtime-test-release", 
            "properties": {
              "hello": {
                "port": 8119
              }
            }
          }
        ], 
        "releases": [
          {
            "name": "runtime-test-release", 
            "version": "0.1.5"
          }
        ]
      }
    }
  ], 
  "service_broker": false, 
  "service_plan_forms": [
    {
      "description": "Custom Dynamic service plan 1 for Test Tile", 
      "label": "Custom Dynamic Service Plan 1", 
      "name": "custom_dynamic_service_plan_1", 
      "properties": [
        {
          "configurable": true, 
          "description": "The description of this plan", 
          "name": "description1", 
          "type": "string"
        }, 
        {
          "configurable": true, 
          "description": "The license key for this plan", 
          "name": "license_key1", 
          "type": "string"
        }, 
        {
          "configurable": true, 
          "constraints": {
            "max": 500, 
            "min": 1
          }, 
          "default": 1, 
          "description": "The number of available seats for this license", 
          "name": "num_seats1", 
          "type": "integer"
        }
      ], 
      "variable_name": "CUSTOM_DYNAMIC_SERVICE_PLAN_1"
    }, 
    {
      "description": "Custom Dynamic service plan 2 for Test Tile", 
      "label": "Custom Dynamic Service Plan 2", 
      "name": "custom_dynamic_service_plan_2", 
      "properties": [
        {
          "configurable": true, 
          "description": "The description of this plan", 
          "name": "description2", 
          "type": "string"
        }, 
        {
          "configurable": true, 
          "description": "The api key for this plan", 
          "name": "api_key2", 
          "type": "string"
        }, 
        {
          "configurable": true, 
          "default": 1, 
          "description": "The number of licenses", 
          "name": "num_of_license2", 
          "type": "integer"
        }
      ], 
      "variable_name": "CUSTOM_DYNAMIC_SERVICE_PLAN_2"
    }
  ], 
  "sha1": false, 
  "space": "test-tile-space", 
  "standalone": false, 
  "stemcell_criteria": {
    "os": "ubuntu-xenial", 
    "version": "1234"
  }, 
  "update": {
    "canaries": 1, 
    "canary_watch_time": "10000-(( .properties.canary_watch_timeout ))", 
    "max_in_flight": 1, 
    "update_watch_time": "10000-(( .properties.update_watch_timeout ))"
  }, 
  "verbose": false, 
  "version": "0.0.1"
}
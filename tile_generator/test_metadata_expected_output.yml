---
description: A sample tile generated by tile-generator
icon_image: resources/icon.png
label: Generated Test Tile
metadata_version: '1.8'
minimum_version_for_upgrade: 0.0.1
name: test-tile
product_version: 0.0.1
rank: 1
requires_product_versions:
- name: cf
  version: '>= 1.9'
serial: true
service_broker: false
standalone: false


releases:

stemcell_criteria:
  os: ubuntu-xenial
  requires_cpi: false
  version: '1234'


property_blueprints:
- configurable: true
  default: test-tile-org
  name: org
  type: string
- configurable: true
  default: test-tile-space
  name: space
  type: string
- configurable: true
  default: false
  name: apply_open_security_group
  type: boolean
- configurable: true
  default: true
  name: allow_paid_service_plans
  type: boolean
- configurable: false
  name: generated_rsa_cert_credentials
  optional: false
  type: rsa_cert_credentials
- configurable: true
  name: custom_dynamic_service_plan_1
  optional: true
  property_blueprints:
  - name: guid
    optional: false
    type: uuid
    unique: true
  - configurable: true
    name: name
    type: string
    unique: true
  - configurable: true
    description: The description of this plan
    name: description1
    type: string
  - configurable: true
    description: The license key for this plan
    name: license_key1
    type: string
  - configurable: true
    constraints:
      max: 500
      min: 1
    default: 1
    description: The number of available seats for this license
    name: num_seats1
    type: integer
  type: collection
- configurable: true
  name: custom_dynamic_service_plan_2
  optional: true
  property_blueprints:
  - name: guid
    optional: false
    type: uuid
    unique: true
  - configurable: true
    name: name
    type: string
    unique: true
  - configurable: true
    description: The description of this plan
    name: description2
    type: string
  - configurable: true
    description: The api key for this plan
    name: api_key2
    type: string
  - configurable: true
    default: 1
    description: The number of licenses
    name: num_of_license2
    type: integer
  type: collection
- configurable: true
  default: true
  name: tg_test_broker1_enable_global_access_to_plans
  type: boolean
- configurable: true
  default: false
  name: tg_test_broker2_enable_global_access_to_plans
  type: boolean
- configurable: true
  default: 99
  name: tg_test_buildpack_buildpack_order
  type: integer
- configurable: false
  default: Tile Ninja
  label: Author
  name: author
  optional: false
  type: string
- configurable: true
  label: Full Name
  name: customer_name
  optional: true
  type: string
- configurable: true
  description: Address to use for junk mail
  label: Street Address
  name: street_address
  optional: false
  type: string
- configurable: true
  label: City
  name: city
  optional: false
  type: string
- configurable: true
  default: '90310'
  label: ZIP+4
  name: zip_code
  optional: false
  type: string
- configurable: true
  label: Country
  name: country
  optional: false
  options:
  - default: true
    label: US
    name: country_us
  - label: Elsewhere
    name: country_elsewhere
  type: dropdown_select
- configurable: true
  default:
  - album: Christmas Carols
    artist: Ops Manatee
    explicit: true
  label: Albums
  name: example_collection
  optional: false
  property_blueprints:
  - label: Album
    name: album
    type: string
  - label: Artist
    name: artist
    type: string
  - label: Explicit
    name: explicit
    type: boolean
  type: collection
- configurable: true
  default: Pizza
  label: Food Choices
  name: example_selector
  option_templates:
  - name: pizza_option
    named_manifests:
    - manifest: "pepperoni: (( .properties.example_selector.pizza_option.pepperoni.value ))\r\npineapple: (( .properties.example_selector.pizza_option.pineapple.value ))\r\nother_toppings: (( .properties.example_selector.pizza_option.other_toppings.value ))\r\n"
      name: manifest_snippet
    property_blueprints:
    - configurable: true
      label: Pepperoni
      name: pepperoni
      type: boolean
    - configurable: true
      label: Pineapple
      name: pineapple
      type: boolean
    - configurable: true
      label: Other Toppings
      name: other_toppings
      optional: true
      type: string
    select_value: Pizza
  - name: filet_mignon_option
    named_manifests:
    - manifest: "steak_creds: { identity: (( .properties.example_selector.filet_mignon_option.steak_creds.identity )), password: (( .properties.example_selector.filet_mignon_option.steak_creds.password )) }\r\nrarity_dropdown: (( .properties.example_selector.filet_mignon_option.rarity_dropdown.value ))\r\n"
      name: manifest_snippet
    property_blueprints:
    - configurable: true
      label: Complex type inside selector
      name: steak_creds
      type: simple_credentials
    - configurable: true
      default: rare
      label: How rare?
      name: rarity_dropdown
      options:
      - label: Rare
        name: rare
      - label: Medium
        name: medium
      - label: Well done
        name: well-done
      type: dropdown_select
    select_value: Filet Mignon
  optional: false
  type: selector
- configurable: true
  description: Example of simple credentials type
  label: Simple Credentials
  name: my_creds
  optional: false
  type: simple_credentials
- configurable: true
  constraints:
  - error_message: This name cannot contain capital digits.
    must_match_regex: ^[^!@#$%^&*()]*$
  label: Username
  name: username
  optional: false
  type: string
- configurable: true
  label: Password
  name: password
  optional: false
  type: secret
- configurable: true
  description: Maximum amount of time to allow canaries to take before going healthy
  label: Canary Watch Timeout
  name: canary_watch_timeout
  optional: false
  type: integer
- configurable: true
  description: Maximum amount of time to allow non-canaries to take before going healthy
  label: Update Watch Timeout
  name: update_watch_timeout
  optional: false
  type: integer
- configurable: true
  default: feature_disabled
  description: Choose whether or not to enable this feature.
  label: Enable this feature?
  name: is_feature_enabled
  option_templates:
  - description: Enable this feature (requires more config).
    label: Enable feature
    name: feature_enabled
    named_manifests:
    - manifest: "feature_config: (( .properties.is_feature_enabled.feature_enabled.feature_config.value ))\r\n"
      name: manifest_snippet
    property_blueprints:
    - configurable: true
      label: Configure this feature
      name: feature_config
      type: string
    select_value: feature_enabled
  - description: Disable this feature (no more config).
    label: Disable feature
    name: feature_disabled
    named_manifests:
    - manifest: ''
      name: manifest_snippet
    select_value: feature_disabled
  optional: false
  type: selector
- configurable: true
  label: Planets
  name: planets
  optional: true
  options:
  - label: mercury
    name: mercury
  - label: venus
    name: Venus
  - label: earth
    name: Earth
  - label: mars
    name: Mars
  - label: jupiter
    name: Jupiter
  - label: saturn
    name: Saturn
  - label: uranus
    name: Uranus
  - label: neptune
    name: Neptune
  type: multi_select_options
- configurable: true
  default: 2
  label: Dynamic app instance count
  name: app_instances
  optional: false
  type: integer
- configurable: true
  default: tg-test-broker1-service
  label: Auto services service name
  name: auto_service_name
  optional: false
  type: string


form_types: 
- description: Examples of basic property types
  label: Contact Info
  name: contact_form
  property_inputs:
  - description: Full Name
    label: Full Name
    reference: .properties.customer_name
  - description: Address to use for junk mail
    label: Street Address
    reference: .properties.street_address
  - description: City
    label: City
    reference: .properties.city
  - description: ZIP+4
    label: ZIP+4
    reference: .properties.zip_code
  - description: Country
    label: Country
    reference: .properties.country
- description: Example of collection property type
  label: Albums
  name: albums_form
  property_inputs:
  - description: Albums
    label: Albums
    property_inputs:
    - description: Album
      label: Album
      reference: album
    - description: Artist
      label: Artist
      reference: artist
    - description: Explicit
      label: Explicit
      reference: explicit
    reference: .properties.example_collection
- description: Example of selector property type
  label: Food Order
  name: food_form
  property_inputs:
  - description: Food Choices
    label: Food Choices
    reference: .properties.example_selector
    selector_property_inputs:
    - label: Pizza
      property_inputs:
      - label: Pepperoni
        reference: .properties.example_selector.pizza_option.pepperoni
      - label: Pineapple
        reference: .properties.example_selector.pizza_option.pineapple
      - label: Other Toppings
        reference: .properties.example_selector.pizza_option.other_toppings
      reference: .properties.example_selector.pizza_option
    - label: Filet Mignon
      property_inputs:
      - label: Complex type inside selector
        reference: .properties.example_selector.filet_mignon_option.steak_creds
      - label: How rare?
        reference: .properties.example_selector.filet_mignon_option.rarity_dropdown
      reference: .properties.example_selector.filet_mignon_option
- description: Examples of secret property types
  label: Credentials
  name: credentials_form
  property_inputs:
  - description: Example of simple credentials type
    label: Simple Credentials
    reference: .properties.my_creds
  - description: Username
    label: Username
    reference: .properties.username
  - description: Password
    label: Password
    reference: .properties.password
- description: Example of user-configured update Settings
  label: Update Settings
  name: update_form
  property_inputs:
  - description: Maximum amount of time to allow canaries to take before going healthy
    label: Canary Watch Timeout
    reference: .properties.canary_watch_timeout
  - description: Maximum amount of time to allow non-canaries to take before going healthy
    label: Update Watch Timeout
    reference: .properties.update_watch_timeout
- description: Configure this feature.
  label: Selector without subproperties
  name: selector_without_subproperties
  property_inputs:
  - description: Choose whether or not to enable this feature.
    label: Enable this feature?
    reference: .properties.is_feature_enabled
    selector_property_inputs:
    - label: Enable feature
      property_inputs:
      - label: Configure this feature
        reference: .properties.is_feature_enabled.feature_enabled.feature_config
      reference: .properties.is_feature_enabled.feature_enabled
    - label: Disable feature
      property_inputs: null
      reference: .properties.is_feature_enabled.feature_disabled
- description: Multi-Select Example
  label: Multi-Select Example
  name: planets_form
  property_inputs:
  - description: Planets
    label: Planets
    reference: .properties.planets
- description: App manifest config
  label: App manifest config
  name: app_manifest_form
  property_inputs:
  - description: Dynamic app instance count
    label: Dynamic app instance count
    reference: .properties.app_instances
- description: Auto services config
  label: Auto services config
  name: auto_services_form
  property_inputs:
  - description: Auto services service name
    label: Auto services service name
    reference: .properties.auto_service_name
- description: Custom Dynamic service plan 1 for Test Tile
  label: Custom Dynamic Service Plan 1
  name: custom_dynamic_service_plan_1
  property_inputs:
  - label: Custom Dynamic Service Plan 1
    property_inputs:
    - description: Name of Plan
      label: Plan Name
      reference: name
      slug: false
    - description: The description of this plan
      label: description1
      reference: description1
      slug: false
    - description: The license key for this plan
      label: license_key1
      reference: license_key1
      slug: false
    - description: The number of available seats for this license
      label: num_seats1
      reference: num_seats1
      slug: false
    reference: .properties.custom_dynamic_service_plan_1
- description: Custom Dynamic service plan 2 for Test Tile
  label: Custom Dynamic Service Plan 2
  name: custom_dynamic_service_plan_2
  property_inputs:
  - label: Custom Dynamic Service Plan 2
    property_inputs:
    - description: Name of Plan
      label: Plan Name
      reference: name
      slug: false
    - description: The description of this plan
      label: description2
      reference: description2
      slug: false
    - description: The api key for this plan
      label: api_key2
      reference: api_key2
      slug: false
    - description: The number of licenses
      label: num_of_license2
      reference: num_of_license2
      slug: false
    reference: .properties.custom_dynamic_service_plan_2
- description: Configurable settings for buildpacks
  label: Buildpack Settings
  name: buildpacks
  property_inputs:
  - description: Enter order for the tg_test_buildpack buildpack
    label: tg_test_buildpack Buildpack Order
    reference: .properties.tg_test_buildpack_buildpack_order
- description: Determine availability of services
  label: Service Access
  name: service_access
  property_inputs:
  - description: Enable global access to plans in the marketplace
    label: Enable global access to plans of service tg_test_broker1
    reference: .properties.tg_test_broker1_enable_global_access_to_plans
  - description: Enable global access to plans in the marketplace
    label: Enable global access to plans of service tg_test_broker2
    reference: .properties.tg_test_broker2_enable_global_access_to_plans


job_types: 
- dynamic_ip: 1
  instance_definition:
    configurable: true
    default: 1
    name: instances
    type: integer
  manifest: |
    allow_paid_service_plans: (( .properties.allow_paid_service_plans.value ))
    app_domains:
    - (( ..cf.cloud_controller.apps_domain.value ))
    app_instances: (( .properties.app_instances.value ))
    apply_open_security_group: (( .properties.apply_open_security_group.value ))
    author: (( .properties.author.value ))
    auto_service_name: (( .properties.auto_service_name.value ))
    canary_watch_timeout: (( .properties.canary_watch_timeout.value ))
    cf:
      admin_password: (( ..cf.uaa.system_services_credentials.password ))
      admin_user: (( ..cf.uaa.system_services_credentials.identity ))
    city: (( .properties.city.value ))
    country: (( .properties.country.value ))
    custom_dynamic_service_plan_1: (( .properties.custom_dynamic_service_plan_1.value ))
    custom_dynamic_service_plan_2: (( .properties.custom_dynamic_service_plan_2.value ))
    customer_name: (( .properties.customer_name.value ))
    domain: (( ..cf.cloud_controller.system_domain.value ))
    example_collection: (( .properties.example_collection.value ))
    example_selector:
      selected_option: (( .properties.example_selector.selected_option.parsed_manifest(manifest_snippet) ))
      value: (( .properties.example_selector.value ))
    is_feature_enabled:
      selected_option: (( .properties.is_feature_enabled.selected_option.parsed_manifest(manifest_snippet) ))
      value: (( .properties.is_feature_enabled.value ))
    my_creds:
      identity: (( .properties.my_creds.identity ))
      password: (( .properties.my_creds.password ))
    opsman_ca: (( $ops_manager.ca_certificate ))
    org: (( .properties.org.value ))
    password: (( .properties.password.value ))
    planets: (( .properties.planets.value ))
    route_registrar:
      routes:
      - name: runtime_conf_yes
        port: 8119
        registration_interval: 20s
        uris:
        - runtime-conf-yes.(( ..cf.cloud_controller.system_domain.value ))
    runtime_test_release:
      name: runtime_test_release
    space: (( .properties.space.value ))
    ssl:
      skip_cert_verify: (( ..cf.ha_proxy.skip_cert_verify.value ))
    street_address: (( .properties.street_address.value ))
    tg_test_app1:
      app_manifest:
        buildpack: python_buildpack
        command: python app.py
        instances: (( .properties.app_instances.value ))
        memory: 256M
        path: app.zip
      auto_services: []
      name: tg_test_app1
    tg_test_app1_auto_zip:
      app_manifest:
        buildpack: python_buildpack
        command: python app.py
        memory: 256M
        path: app
      auto_services: []
      name: tg_test_app1_auto_zip
    tg_test_app2:
      app_manifest:
        buildpack: python_buildpack
        command: python app.py
        host: tg-test-app2-hostname
        memory: 256M
        path: app.zip
      auto_services:
      - name: tg-test-broker1-service
        plan: first-plan
      - name: (( .properties.auto_service_name.value ))
      name: tg_test_app2
    tg_test_app3:
      app_manifest:
        memory: 256M
      auto_services:
      - name: tg-test-broker1-service
        plan: second-plan
        service_instance: tg-test-svc
      name: tg_test_app3
    tg_test_app4:
      name: tg_test_app4
    tg_test_app5:
      name: tg_test_app5
    tg_test_app6:
      name: tg_test_app6
    tg_test_app7:
      name: tg_test_app7
    tg_test_binary_app:
      app_manifest:
        buildpack: binary_buildpack
        command: ./binary-app.py
        memory: 256M
        path: binary-app.py
      auto_services: []
      name: tg_test_binary_app
    tg_test_broker1:
      app_manifest:
        buildpack: python_buildpack
        command: python app.py
        memory: 256M
        path: app.zip
      auto_services: []
      enable_global_access_to_plans: (( .properties.tg_test_broker1_enable_global_access_to_plans.value ))
      name: tg_test_broker1
    tg_test_broker2:
      app_manifest:
        buildpack: python_buildpack
        command: python app.py
        memory: 256M
        path: app.zip
      auto_services: []
      enable_global_access_to_plans: (( .properties.tg_test_broker2_enable_global_access_to_plans.value ))
      name: tg_test_broker2
    tg_test_buildpack:
      buildpack_order: (( .properties.tg_test_buildpack_buildpack_order.value ))
      name: tg_test_buildpack
    uaa:
      admin_client: (( ..cf.uaa.admin_client_credentials.identity ))
      admin_client_secret: (( ..cf.uaa.admin_client_credentials.password ))
    update_watch_timeout: (( .properties.update_watch_timeout.value ))
    username: (( .properties.username.value ))
    zip_code: (( .properties.zip_code.value ))
  max_in_flight: 1
  name: node-yes
  property_blueprints:
  - default:
      identity: vcap
    name: vm_credentials
    type: salted_credentials
  resource_definitions:
  - configurable: true
    constraints:
      min: 0
    default: 512
    name: ram
    type: integer
  - configurable: true
    constraints:
      min: 0
    default: 4096
    name: ephemeral_disk
    type: integer
  - configurable: true
    constraints:
      min: 0
    default: 0
    name: persistent_disk
    type: integer
  - configurable: true
    constraints:
      min: 1
    default: 1
    name: cpu
    type: integer
  resource_label: node-yes
  single_az_only: false
  static_ip: 0
  templates:
  - name: no-op
    release: no-op-release
  - consumes: |
      nats:
        deployment: (( ..cf.deployment_name ))
        from: nats
    name: route_registrar
    release: routing
- dynamic_ip: 1
  instance_definition:
    configurable: true
    default: 1
    name: instances
    type: integer
  manifest: |
    allow_paid_service_plans: (( .properties.allow_paid_service_plans.value ))
    app_domains:
    - (( ..cf.cloud_controller.apps_domain.value ))
    app_instances: (( .properties.app_instances.value ))
    apply_open_security_group: (( .properties.apply_open_security_group.value ))
    author: (( .properties.author.value ))
    auto_service_name: (( .properties.auto_service_name.value ))
    canary_watch_timeout: (( .properties.canary_watch_timeout.value ))
    cf:
      admin_password: (( ..cf.uaa.system_services_credentials.password ))
      admin_user: (( ..cf.uaa.system_services_credentials.identity ))
    city: (( .properties.city.value ))
    country: (( .properties.country.value ))
    custom_dynamic_service_plan_1: (( .properties.custom_dynamic_service_plan_1.value ))
    custom_dynamic_service_plan_2: (( .properties.custom_dynamic_service_plan_2.value ))
    customer_name: (( .properties.customer_name.value ))
    domain: (( ..cf.cloud_controller.system_domain.value ))
    example_collection: (( .properties.example_collection.value ))
    example_selector:
      selected_option: (( .properties.example_selector.selected_option.parsed_manifest(manifest_snippet) ))
      value: (( .properties.example_selector.value ))
    is_feature_enabled:
      selected_option: (( .properties.is_feature_enabled.selected_option.parsed_manifest(manifest_snippet) ))
      value: (( .properties.is_feature_enabled.value ))
    my_creds:
      identity: (( .properties.my_creds.identity ))
      password: (( .properties.my_creds.password ))
    opsman_ca: (( $ops_manager.ca_certificate ))
    org: (( .properties.org.value ))
    password: (( .properties.password.value ))
    planets: (( .properties.planets.value ))
    route_registrar:
      routes:
      - name: runtime_conf_no
        port: 8119
        registration_interval: 20s
        uris:
        - runtime-conf-no.(( ..cf.cloud_controller.system_domain.value ))
    runtime_test_release:
      name: runtime_test_release
    space: (( .properties.space.value ))
    ssl:
      skip_cert_verify: (( ..cf.ha_proxy.skip_cert_verify.value ))
    street_address: (( .properties.street_address.value ))
    tg_test_app1:
      app_manifest:
        buildpack: python_buildpack
        command: python app.py
        instances: (( .properties.app_instances.value ))
        memory: 256M
        path: app.zip
      auto_services: []
      name: tg_test_app1
    tg_test_app1_auto_zip:
      app_manifest:
        buildpack: python_buildpack
        command: python app.py
        memory: 256M
        path: app
      auto_services: []
      name: tg_test_app1_auto_zip
    tg_test_app2:
      app_manifest:
        buildpack: python_buildpack
        command: python app.py
        host: tg-test-app2-hostname
        memory: 256M
        path: app.zip
      auto_services:
      - name: tg-test-broker1-service
        plan: first-plan
      - name: (( .properties.auto_service_name.value ))
      name: tg_test_app2
    tg_test_app3:
      app_manifest:
        memory: 256M
      auto_services:
      - name: tg-test-broker1-service
        plan: second-plan
        service_instance: tg-test-svc
      name: tg_test_app3
    tg_test_app4:
      name: tg_test_app4
    tg_test_app5:
      name: tg_test_app5
    tg_test_app6:
      name: tg_test_app6
    tg_test_app7:
      name: tg_test_app7
    tg_test_binary_app:
      app_manifest:
        buildpack: binary_buildpack
        command: ./binary-app.py
        memory: 256M
        path: binary-app.py
      auto_services: []
      name: tg_test_binary_app
    tg_test_broker1:
      app_manifest:
        buildpack: python_buildpack
        command: python app.py
        memory: 256M
        path: app.zip
      auto_services: []
      enable_global_access_to_plans: (( .properties.tg_test_broker1_enable_global_access_to_plans.value ))
      name: tg_test_broker1
    tg_test_broker2:
      app_manifest:
        buildpack: python_buildpack
        command: python app.py
        memory: 256M
        path: app.zip
      auto_services: []
      enable_global_access_to_plans: (( .properties.tg_test_broker2_enable_global_access_to_plans.value ))
      name: tg_test_broker2
    tg_test_buildpack:
      buildpack_order: (( .properties.tg_test_buildpack_buildpack_order.value ))
      name: tg_test_buildpack
    uaa:
      admin_client: (( ..cf.uaa.admin_client_credentials.identity ))
      admin_client_secret: (( ..cf.uaa.admin_client_credentials.password ))
    update_watch_timeout: (( .properties.update_watch_timeout.value ))
    username: (( .properties.username.value ))
    zip_code: (( .properties.zip_code.value ))
  max_in_flight: 1
  name: node-no
  property_blueprints:
  - default:
      identity: vcap
    name: vm_credentials
    type: salted_credentials
  resource_definitions:
  - configurable: true
    constraints:
      min: 0
    default: 512
    name: ram
    type: integer
  - configurable: true
    constraints:
      min: 0
    default: 4096
    name: ephemeral_disk
    type: integer
  - configurable: true
    constraints:
      min: 0
    default: 0
    name: persistent_disk
    type: integer
  - configurable: true
    constraints:
      min: 1
    default: 1
    name: cpu
    type: integer
  resource_label: node-no
  single_az_only: false
  static_ip: 0
  templates:
  - consumes: |
      nats:
        deployment: (( ..cf.deployment_name ))
        from: nats
    name: route_registrar
    release: routing
- dynamic_ip: 1
  instance_definition:
    configurable: true
    default: 1
    name: instances
    type: integer
  manifest: |
    app_instances: (( .properties.app_instances.value ))
    author: (( .properties.author.value ))
    auto_service_name: (( .properties.auto_service_name.value ))
    canary_watch_timeout: (( .properties.canary_watch_timeout.value ))
    city: (( .properties.city.value ))
    country: (( .properties.country.value ))
    custom_dynamic_service_plan_1: (( .properties.custom_dynamic_service_plan_1.value ))
    custom_dynamic_service_plan_2: (( .properties.custom_dynamic_service_plan_2.value ))
    customer_name: (( .properties.customer_name.value ))
    example_collection: (( .properties.example_collection.value ))
    example_selector:
      selected_option: (( .properties.example_selector.selected_option.parsed_manifest(manifest_snippet) ))
      value: (( .properties.example_selector.value ))
    is_feature_enabled:
      selected_option: (( .properties.is_feature_enabled.selected_option.parsed_manifest(manifest_snippet) ))
      value: (( .properties.is_feature_enabled.value ))
    my_creds:
      identity: (( .properties.my_creds.identity ))
      password: (( .properties.my_creds.password ))
    password: (( .properties.password.value ))
    planets: (( .properties.planets.value ))
    runtime_test_release:
      name: runtime_test_release
    street_address: (( .properties.street_address.value ))
    tg_test_app1:
      app_manifest:
        buildpack: python_buildpack
        command: python app.py
        instances: (( .properties.app_instances.value ))
        memory: 256M
        path: app.zip
      auto_services: []
      name: tg_test_app1
    tg_test_app1_auto_zip:
      app_manifest:
        buildpack: python_buildpack
        command: python app.py
        memory: 256M
        path: app
      auto_services: []
      name: tg_test_app1_auto_zip
    tg_test_app2:
      app_manifest:
        buildpack: python_buildpack
        command: python app.py
        host: tg-test-app2-hostname
        memory: 256M
        path: app.zip
      auto_services:
      - name: tg-test-broker1-service
        plan: first-plan
      - name: (( .properties.auto_service_name.value ))
      name: tg_test_app2
    tg_test_app3:
      app_manifest:
        memory: 256M
      auto_services:
      - name: tg-test-broker1-service
        plan: second-plan
        service_instance: tg-test-svc
      name: tg_test_app3
    tg_test_app4:
      name: tg_test_app4
    tg_test_app5:
      name: tg_test_app5
    tg_test_app6:
      name: tg_test_app6
    tg_test_app7:
      name: tg_test_app7
    tg_test_binary_app:
      app_manifest:
        buildpack: binary_buildpack
        command: ./binary-app.py
        memory: 256M
        path: binary-app.py
      auto_services: []
      name: tg_test_binary_app
    tg_test_broker1:
      app_manifest:
        buildpack: python_buildpack
        command: python app.py
        memory: 256M
        path: app.zip
      auto_services: []
      enable_global_access_to_plans: (( .properties.tg_test_broker1_enable_global_access_to_plans.value ))
      name: tg_test_broker1
    tg_test_broker2:
      app_manifest:
        buildpack: python_buildpack
        command: python app.py
        memory: 256M
        path: app.zip
      auto_services: []
      enable_global_access_to_plans: (( .properties.tg_test_broker2_enable_global_access_to_plans.value ))
      name: tg_test_broker2
    tg_test_buildpack:
      buildpack_order: (( .properties.tg_test_buildpack_buildpack_order.value ))
      name: tg_test_buildpack
    update_watch_timeout: (( .properties.update_watch_timeout.value ))
    username: (( .properties.username.value ))
    zip_code: (( .properties.zip_code.value ))
  max_in_flight: 1
  name: no-op
  property_blueprints:
  - default:
      identity: vcap
    name: vm_credentials
    type: salted_credentials
  resource_definitions:
  - configurable: true
    constraints:
      min: 0
    default: 512
    name: ram
    type: integer
  - configurable: true
    constraints:
      min: 0
    default: 4096
    name: ephemeral_disk
    type: integer
  - configurable: true
    constraints:
      min: 0
    default: 0
    name: persistent_disk
    type: integer
  - configurable: true
    constraints:
      min: 1
    default: 1
    name: cpu
    type: integer
  resource_label: no-op
  single_az_only: false
  static_ip: 0
  templates:
  - name: no-op
    release: standalone-release
- default_internet_connected: false
  dynamic_ip: 1
  instance_definition:
    configurable: true
    default: 2
    name: instances
    type: integer
  manifest: |
    allow_paid_service_plans: (( .properties.allow_paid_service_plans.value ))
    app_domains:
    - (( ..cf.cloud_controller.apps_domain.value ))
    app_instances: (( .properties.app_instances.value ))
    apply_open_security_group: (( .properties.apply_open_security_group.value ))
    author: (( .properties.author.value ))
    auto_service_name: (( .properties.auto_service_name.value ))
    canary_watch_timeout: (( .properties.canary_watch_timeout.value ))
    cf:
      admin_password: (( ..cf.uaa.system_services_credentials.password ))
      admin_user: (( ..cf.uaa.system_services_credentials.identity ))
    city: (( .properties.city.value ))
    country: (( .properties.country.value ))
    custom_dynamic_service_plan_1: (( .properties.custom_dynamic_service_plan_1.value ))
    custom_dynamic_service_plan_2: (( .properties.custom_dynamic_service_plan_2.value ))
    customer_name: (( .properties.customer_name.value ))
    domain: (( ..cf.cloud_controller.system_domain.value ))
    example_collection: (( .properties.example_collection.value ))
    example_selector:
      selected_option: (( .properties.example_selector.selected_option.parsed_manifest(manifest_snippet) ))
      value: (( .properties.example_selector.value ))
    is_feature_enabled:
      selected_option: (( .properties.is_feature_enabled.selected_option.parsed_manifest(manifest_snippet) ))
      value: (( .properties.is_feature_enabled.value ))
    my_creds:
      identity: (( .properties.my_creds.identity ))
      password: (( .properties.my_creds.password ))
    opsman_ca: (( $ops_manager.ca_certificate ))
    org: (( .properties.org.value ))
    password: (( .properties.password.value ))
    planets: (( .properties.planets.value ))
    runtime_test_release:
      name: runtime_test_release
    space: (( .properties.space.value ))
    ssl:
      skip_cert_verify: (( ..cf.ha_proxy.skip_cert_verify.value ))
    street_address: (( .properties.street_address.value ))
    tg_test_app1:
      app_manifest:
        buildpack: python_buildpack
        command: python app.py
        instances: (( .properties.app_instances.value ))
        memory: 256M
        path: app.zip
      auto_services: []
      name: tg_test_app1
    tg_test_app1_auto_zip:
      app_manifest:
        buildpack: python_buildpack
        command: python app.py
        memory: 256M
        path: app
      auto_services: []
      name: tg_test_app1_auto_zip
    tg_test_app2:
      app_manifest:
        buildpack: python_buildpack
        command: python app.py
        host: tg-test-app2-hostname
        memory: 256M
        path: app.zip
      auto_services:
      - name: tg-test-broker1-service
        plan: first-plan
      - name: (( .properties.auto_service_name.value ))
      name: tg_test_app2
    tg_test_app3:
      app_manifest:
        memory: 256M
      auto_services:
      - name: tg-test-broker1-service
        plan: second-plan
        service_instance: tg-test-svc
      name: tg_test_app3
    tg_test_app4:
      name: tg_test_app4
    tg_test_app5:
      name: tg_test_app5
    tg_test_app6:
      name: tg_test_app6
    tg_test_app7:
      name: tg_test_app7
    tg_test_binary_app:
      app_manifest:
        buildpack: binary_buildpack
        command: ./binary-app.py
        memory: 256M
        path: binary-app.py
      auto_services: []
      name: tg_test_binary_app
    tg_test_broker1:
      app_manifest:
        buildpack: python_buildpack
        command: python app.py
        memory: 256M
        path: app.zip
      auto_services: []
      enable_global_access_to_plans: (( .properties.tg_test_broker1_enable_global_access_to_plans.value ))
      name: tg_test_broker1
    tg_test_broker2:
      app_manifest:
        buildpack: python_buildpack
        command: python app.py
        memory: 256M
        path: app.zip
      auto_services: []
      enable_global_access_to_plans: (( .properties.tg_test_broker2_enable_global_access_to_plans.value ))
      name: tg_test_broker2
    tg_test_buildpack:
      buildpack_order: (( .properties.tg_test_buildpack_buildpack_order.value ))
      name: tg_test_buildpack
    uaa:
      admin_client: (( ..cf.uaa.admin_client_credentials.identity ))
      admin_client_secret: (( ..cf.uaa.admin_client_credentials.password ))
    update_watch_timeout: (( .properties.update_watch_timeout.value ))
    username: (( .properties.username.value ))
    zip_code: (( .properties.zip_code.value ))
  max_in_flight: 1
  name: redis
  property_blueprints:
  - default:
      identity: vcap
    name: vm_credentials
    type: salted_credentials
  resource_definitions:
  - configurable: true
    constraints:
      min: 512
    default: 512
    name: ram
    type: integer
  - configurable: true
    constraints:
      min: 4096
    default: 4096
    name: ephemeral_disk
    type: integer
  - configurable: true
    constraints:
      min: 4096
    default: 4096
    name: persistent_disk
    type: integer
  - configurable: true
    constraints:
      min: 2
    default: 2
    name: cpu
    type: integer
  resource_label: redis
  single_az_only: false
  static_ip: 0
  templates:
  - name: redis
    release: redis
- dynamic_ip: 1
  errand: true
  instance_definition:
    configurable: false
    default: 1
    name: instances
    type: integer
  manifest: |
    allow_paid_service_plans: (( .properties.allow_paid_service_plans.value ))
    app_domains:
    - (( ..cf.cloud_controller.apps_domain.value ))
    app_instances: (( .properties.app_instances.value ))
    apply_open_security_group: (( .properties.apply_open_security_group.value ))
    author: (( .properties.author.value ))
    auto_service_name: (( .properties.auto_service_name.value ))
    canary_watch_timeout: (( .properties.canary_watch_timeout.value ))
    cf:
      admin_password: (( ..cf.uaa.system_services_credentials.password ))
      admin_user: (( ..cf.uaa.system_services_credentials.identity ))
      some: property
    city: (( .properties.city.value ))
    country: (( .properties.country.value ))
    custom_dynamic_service_plan_1: (( .properties.custom_dynamic_service_plan_1.value ))
    custom_dynamic_service_plan_2: (( .properties.custom_dynamic_service_plan_2.value ))
    customer_name: (( .properties.customer_name.value ))
    domain: (( ..cf.cloud_controller.system_domain.value ))
    example_collection: (( .properties.example_collection.value ))
    example_selector:
      selected_option: (( .properties.example_selector.selected_option.parsed_manifest(manifest_snippet) ))
      value: (( .properties.example_selector.value ))
    is_feature_enabled:
      selected_option: (( .properties.is_feature_enabled.selected_option.parsed_manifest(manifest_snippet) ))
      value: (( .properties.is_feature_enabled.value ))
    my_creds:
      identity: (( .properties.my_creds.identity ))
      password: (( .properties.my_creds.password ))
    opsman_ca: (( $ops_manager.ca_certificate ))
    org: (( .properties.org.value ))
    password: (( .properties.password.value ))
    planets: (( .properties.planets.value ))
    runtime_test_release:
      name: runtime_test_release
    space: (( .properties.space.value ))
    ssl:
      skip_cert_verify: (( ..cf.ha_proxy.skip_cert_verify.value ))
    street_address: (( .properties.street_address.value ))
    tg_test_app1:
      app_manifest:
        buildpack: python_buildpack
        command: python app.py
        instances: (( .properties.app_instances.value ))
        memory: 256M
        path: app.zip
      auto_services: []
      name: tg_test_app1
    tg_test_app1_auto_zip:
      app_manifest:
        buildpack: python_buildpack
        command: python app.py
        memory: 256M
        path: app
      auto_services: []
      name: tg_test_app1_auto_zip
    tg_test_app2:
      app_manifest:
        buildpack: python_buildpack
        command: python app.py
        host: tg-test-app2-hostname
        memory: 256M
        path: app.zip
      auto_services:
      - name: tg-test-broker1-service
        plan: first-plan
      - name: (( .properties.auto_service_name.value ))
      name: tg_test_app2
    tg_test_app3:
      app_manifest:
        memory: 256M
      auto_services:
      - name: tg-test-broker1-service
        plan: second-plan
        service_instance: tg-test-svc
      name: tg_test_app3
    tg_test_app4:
      name: tg_test_app4
    tg_test_app5:
      name: tg_test_app5
    tg_test_app6:
      name: tg_test_app6
    tg_test_app7:
      name: tg_test_app7
    tg_test_binary_app:
      app_manifest:
        buildpack: binary_buildpack
        command: ./binary-app.py
        memory: 256M
        path: binary-app.py
      auto_services: []
      name: tg_test_binary_app
    tg_test_broker1:
      app_manifest:
        buildpack: python_buildpack
        command: python app.py
        memory: 256M
        path: app.zip
      auto_services: []
      enable_global_access_to_plans: (( .properties.tg_test_broker1_enable_global_access_to_plans.value ))
      name: tg_test_broker1
    tg_test_broker2:
      app_manifest:
        buildpack: python_buildpack
        command: python app.py
        memory: 256M
        path: app.zip
      auto_services: []
      enable_global_access_to_plans: (( .properties.tg_test_broker2_enable_global_access_to_plans.value ))
      name: tg_test_broker2
    tg_test_buildpack:
      buildpack_order: (( .properties.tg_test_buildpack_buildpack_order.value ))
      name: tg_test_buildpack
    uaa:
      admin_client: (( ..cf.uaa.admin_client_credentials.identity ))
      admin_client_secret: (( ..cf.uaa.admin_client_credentials.password ))
    update_watch_timeout: (( .properties.update_watch_timeout.value ))
    username: (( .properties.username.value ))
    zip_code: (( .properties.zip_code.value ))
  max_in_flight: 1
  name: sanity-tests
  property_blueprints:
  - default:
      identity: vcap
    name: vm_credentials
    type: salted_credentials
  resource_definitions:
  - configurable: true
    constraints:
      min: 512
    default: 512
    name: ram
    type: integer
  - configurable: true
    constraints:
      min: 4096
    default: 4096
    name: ephemeral_disk
    type: integer
  - configurable: false
    constraints:
      min: 0
    default: 0
    name: persistent_disk
    type: integer
  - configurable: true
    constraints:
      min: 2
    default: 2
    name: cpu
    type: integer
  resource_label: sanity-tests
  run_post_deploy_errand_default: when-changed
  single_az_only: true
  static_ip: 0
  templates:
  - name: sanity-tests
    release: redis
- dynamic_ip: 0
  errand: false
  instance_definition:
    configurable: true
    default: 1
    name: instances
    type: integer
  manifest: |
    allow_paid_service_plans: (( .properties.allow_paid_service_plans.value ))
    app_domains:
    - (( ..cf.cloud_controller.apps_domain.value ))
    app_instances: (( .properties.app_instances.value ))
    apply_open_security_group: (( .properties.apply_open_security_group.value ))
    author: (( .properties.author.value ))
    auto_service_name: (( .properties.auto_service_name.value ))
    canary_watch_timeout: (( .properties.canary_watch_timeout.value ))
    cf:
      admin_password: (( ..cf.uaa.system_services_credentials.password ))
      admin_user: (( ..cf.uaa.system_services_credentials.identity ))
    city: (( .properties.city.value ))
    containers:
    - bind_ports:
      - 80:80
      - 443:443
      - 8080:8080
      - 8443:8443
      env_file:
      - /var/vcap/jobs/docker-bosh-tg_test_app4/bin/opsmgr.env
      image: guidowb/sample-cf-app
      name: app
      volumes:
      - /var/vcap/data/certs:/mnt/certs/opsman-certs:ro
      - /usr/local/share/ca-certificates:/mnt/certs/host-ca-certs:ro
    country: (( .properties.country.value ))
    custom_dynamic_service_plan_1: (( .properties.custom_dynamic_service_plan_1.value ))
    custom_dynamic_service_plan_2: (( .properties.custom_dynamic_service_plan_2.value ))
    customer_name: (( .properties.customer_name.value ))
    domain: (( ..cf.cloud_controller.system_domain.value ))
    example_collection: (( .properties.example_collection.value ))
    example_selector:
      selected_option: (( .properties.example_selector.selected_option.parsed_manifest(manifest_snippet) ))
      value: (( .properties.example_selector.value ))
    is_feature_enabled:
      selected_option: (( .properties.is_feature_enabled.selected_option.parsed_manifest(manifest_snippet) ))
      value: (( .properties.is_feature_enabled.value ))
    my_creds:
      identity: (( .properties.my_creds.identity ))
      password: (( .properties.my_creds.password ))
    opsman_ca: (( $ops_manager.ca_certificate ))
    org: (( .properties.org.value ))
    password: (( .properties.password.value ))
    planets: (( .properties.planets.value ))
    route_registrar:
      routes:
      - name: my-route-tg-test-app4
        port: 8080
        registration_interval: 20s
        uris:
        - my-route-tg-test-app4.(( ..cf.cloud_controller.system_domain.value ))
    runtime_test_release:
      name: runtime_test_release
    security:
      password: (( .deploy-all.app_credentials.password ))
      user: (( .deploy-all.app_credentials.identity ))
    space: (( .properties.space.value ))
    ssl:
      skip_cert_verify: (( ..cf.ha_proxy.skip_cert_verify.value ))
    street_address: (( .properties.street_address.value ))
    tg_test_app1:
      name: tg_test_app1
    tg_test_app1_auto_zip:
      name: tg_test_app1_auto_zip
    tg_test_app2:
      name: tg_test_app2
    tg_test_app3:
      name: tg_test_app3
    tg_test_app4:
      name: tg_test_app4
    tg_test_app5:
      name: tg_test_app5
    tg_test_app6:
      name: tg_test_app6
    tg_test_app7:
      name: tg_test_app7
    tg_test_binary_app:
      name: tg_test_binary_app
    tg_test_broker1:
      enable_global_access_to_plans: (( .properties.tg_test_broker1_enable_global_access_to_plans.value ))
      name: tg_test_broker1
      password: (( .docker-bosh-tg_test_app4.app_credentials.password ))
      user: (( .docker-bosh-tg_test_app4.app_credentials.identity ))
    tg_test_broker2:
      enable_global_access_to_plans: (( .properties.tg_test_broker2_enable_global_access_to_plans.value ))
      name: tg_test_broker2
      password: (( .docker-bosh-tg_test_app4.app_credentials.password ))
      user: (( .docker-bosh-tg_test_app4.app_credentials.identity ))
    tg_test_buildpack:
      buildpack_order: (( .properties.tg_test_buildpack_buildpack_order.value ))
      name: tg_test_buildpack
    tls_cacert: (( $ops_manager.ca_certificate ))
    tls_cert: (( .properties.generated_rsa_cert_credentials.cert_pem ))
    tls_key: (( .properties.generated_rsa_cert_credentials.private_key_pem ))
    uaa:
      admin_client: (( ..cf.uaa.admin_client_credentials.identity ))
      admin_client_secret: (( ..cf.uaa.admin_client_credentials.password ))
    update_watch_timeout: (( .properties.update_watch_timeout.value ))
    username: (( .properties.username.value ))
    zip_code: (( .properties.zip_code.value ))
  max_in_flight: 1
  name: docker-bosh-tg_test_app4
  property_blueprints:
  - default:
      identity: vcap
    name: vm_credentials
    type: salted_credentials
  - name: app_credentials
    type: salted_credentials
  resource_definitions:
  - configurable: true
    constraints:
      min: 512
    default: 512
    name: ram
    type: integer
  - configurable: true
    constraints:
      min: 4096
    default: 4096
    name: ephemeral_disk
    type: integer
  - configurable: true
    constraints:
      min: 2048
    default: 2048
    name: persistent_disk
    type: integer
  - configurable: true
    constraints:
      min: 2
    default: 2
    name: cpu
    type: integer
  resource_label: docker-bosh-tg_test_app4
  single_az_only: false
  static_ip: 1
  templates:
  - name: containers
    release: docker
  - name: docker
    release: docker
  - name: docker-bosh-tg_test_app4
    release: test-tile
  - consumes: |
      nats:
        from: nats
        deployment: (( ..cf.deployment_name ))
    name: route_registrar
    release: routing
- dynamic_ip: 1
  errand: true
  instance_definition:
    configurable: false
    default: 1
    name: instances
    type: integer
  manifest: |
    allow_paid_service_plans: (( .properties.allow_paid_service_plans.value ))
    app_domains:
    - (( ..cf.cloud_controller.apps_domain.value ))
    app_instances: (( .properties.app_instances.value ))
    apply_open_security_group: (( .properties.apply_open_security_group.value ))
    author: (( .properties.author.value ))
    auto_service_name: (( .properties.auto_service_name.value ))
    canary_watch_timeout: (( .properties.canary_watch_timeout.value ))
    cf:
      admin_password: (( ..cf.uaa.system_services_credentials.password ))
      admin_user: (( ..cf.uaa.system_services_credentials.identity ))
    city: (( .properties.city.value ))
    country: (( .properties.country.value ))
    custom_dynamic_service_plan_1: (( .properties.custom_dynamic_service_plan_1.value ))
    custom_dynamic_service_plan_2: (( .properties.custom_dynamic_service_plan_2.value ))
    customer_name: (( .properties.customer_name.value ))
    domain: (( ..cf.cloud_controller.system_domain.value ))
    example_collection: (( .properties.example_collection.value ))
    example_selector:
      selected_option: (( .properties.example_selector.selected_option.parsed_manifest(manifest_snippet) ))
      value: (( .properties.example_selector.value ))
    is_feature_enabled:
      selected_option: (( .properties.is_feature_enabled.selected_option.parsed_manifest(manifest_snippet) ))
      value: (( .properties.is_feature_enabled.value ))
    my_creds:
      identity: (( .properties.my_creds.identity ))
      password: (( .properties.my_creds.password ))
    opsman_ca: (( $ops_manager.ca_certificate ))
    org: (( .properties.org.value ))
    password: (( .properties.password.value ))
    planets: (( .properties.planets.value ))
    runtime_test_release:
      name: runtime_test_release
    security:
      password: (( .deploy-all.app_credentials.password ))
      user: (( .deploy-all.app_credentials.identity ))
    space: (( .properties.space.value ))
    ssl:
      skip_cert_verify: (( ..cf.ha_proxy.skip_cert_verify.value ))
    street_address: (( .properties.street_address.value ))
    tg_test_app1:
      app_manifest:
        buildpack: python_buildpack
        command: python app.py
        instances: (( .properties.app_instances.value ))
        memory: 256M
        path: app.zip
      auto_services: []
      name: tg_test_app1
    tg_test_app1_auto_zip:
      app_manifest:
        buildpack: python_buildpack
        command: python app.py
        memory: 256M
        path: app
      auto_services: []
      name: tg_test_app1_auto_zip
    tg_test_app2:
      app_manifest:
        buildpack: python_buildpack
        command: python app.py
        host: tg-test-app2-hostname
        memory: 256M
        path: app.zip
      auto_services:
      - name: tg-test-broker1-service
        plan: first-plan
      - name: (( .properties.auto_service_name.value ))
      name: tg_test_app2
    tg_test_app3:
      app_manifest:
        memory: 256M
      auto_services:
      - name: tg-test-broker1-service
        plan: second-plan
        service_instance: tg-test-svc
      name: tg_test_app3
    tg_test_app4:
      name: tg_test_app4
    tg_test_app5:
      name: tg_test_app5
    tg_test_app6:
      name: tg_test_app6
    tg_test_app7:
      name: tg_test_app7
    tg_test_binary_app:
      app_manifest:
        buildpack: binary_buildpack
        command: ./binary-app.py
        memory: 256M
        path: binary-app.py
      auto_services: []
      name: tg_test_binary_app
    tg_test_broker1:
      app_manifest:
        buildpack: python_buildpack
        command: python app.py
        memory: 256M
        path: app.zip
      auto_services: []
      enable_global_access_to_plans: (( .properties.tg_test_broker1_enable_global_access_to_plans.value ))
      name: tg_test_broker1
      password: (( .deploy-all.app_credentials.password ))
      user: (( .deploy-all.app_credentials.identity ))
    tg_test_broker2:
      app_manifest:
        buildpack: python_buildpack
        command: python app.py
        memory: 256M
        path: app.zip
      auto_services: []
      enable_global_access_to_plans: (( .properties.tg_test_broker2_enable_global_access_to_plans.value ))
      name: tg_test_broker2
      password: (( .deploy-all.app_credentials.password ))
      user: (( .deploy-all.app_credentials.identity ))
    tg_test_buildpack:
      buildpack_order: (( .properties.tg_test_buildpack_buildpack_order.value ))
      name: tg_test_buildpack
    uaa:
      admin_client: (( ..cf.uaa.admin_client_credentials.identity ))
      admin_client_secret: (( ..cf.uaa.admin_client_credentials.password ))
    update_watch_timeout: (( .properties.update_watch_timeout.value ))
    username: (( .properties.username.value ))
    zip_code: (( .properties.zip_code.value ))
  max_in_flight: 1
  name: deploy-all
  property_blueprints:
  - default:
      identity: vcap
    name: vm_credentials
    type: salted_credentials
  - name: app_credentials
    type: salted_credentials
  resource_definitions:
  - configurable: true
    default: 1024
    name: ram
    type: integer
  - configurable: true
    default: 4096
    name: ephemeral_disk
    type: integer
  - configurable: false
    constraints:
      min: 0
    default: 0
    name: persistent_disk
    type: integer
  - configurable: true
    default: 1
    name: cpu
    type: integer
  resource_label: deploy-all
  single_az_only: true
  static_ip: 0
  templates:
  - consumes: |
      docker-tcp:
        from: docker
      nats:
        deployment: (( ..cf.deployment_name ))
        from: nats
      redis:
        from: redis
    name: deploy-all
    release: test-tile
- dynamic_ip: 1
  errand: true
  instance_definition:
    configurable: false
    default: 1
    name: instances
    type: integer
  manifest: |
    allow_paid_service_plans: (( .properties.allow_paid_service_plans.value ))
    app_domains:
    - (( ..cf.cloud_controller.apps_domain.value ))
    app_instances: (( .properties.app_instances.value ))
    apply_open_security_group: (( .properties.apply_open_security_group.value ))
    author: (( .properties.author.value ))
    auto_service_name: (( .properties.auto_service_name.value ))
    canary_watch_timeout: (( .properties.canary_watch_timeout.value ))
    cf:
      admin_password: (( ..cf.uaa.system_services_credentials.password ))
      admin_user: (( ..cf.uaa.system_services_credentials.identity ))
    city: (( .properties.city.value ))
    country: (( .properties.country.value ))
    custom_dynamic_service_plan_1: (( .properties.custom_dynamic_service_plan_1.value ))
    custom_dynamic_service_plan_2: (( .properties.custom_dynamic_service_plan_2.value ))
    customer_name: (( .properties.customer_name.value ))
    domain: (( ..cf.cloud_controller.system_domain.value ))
    example_collection: (( .properties.example_collection.value ))
    example_selector:
      selected_option: (( .properties.example_selector.selected_option.parsed_manifest(manifest_snippet) ))
      value: (( .properties.example_selector.value ))
    is_feature_enabled:
      selected_option: (( .properties.is_feature_enabled.selected_option.parsed_manifest(manifest_snippet) ))
      value: (( .properties.is_feature_enabled.value ))
    my_creds:
      identity: (( .properties.my_creds.identity ))
      password: (( .properties.my_creds.password ))
    opsman_ca: (( $ops_manager.ca_certificate ))
    org: (( .properties.org.value ))
    password: (( .properties.password.value ))
    planets: (( .properties.planets.value ))
    runtime_test_release:
      name: runtime_test_release
    space: (( .properties.space.value ))
    ssl:
      skip_cert_verify: (( ..cf.ha_proxy.skip_cert_verify.value ))
    street_address: (( .properties.street_address.value ))
    tg_test_app1:
      app_manifest:
        buildpack: python_buildpack
        command: python app.py
        instances: (( .properties.app_instances.value ))
        memory: 256M
        path: app.zip
      auto_services: []
      name: tg_test_app1
    tg_test_app1_auto_zip:
      app_manifest:
        buildpack: python_buildpack
        command: python app.py
        memory: 256M
        path: app
      auto_services: []
      name: tg_test_app1_auto_zip
    tg_test_app2:
      app_manifest:
        buildpack: python_buildpack
        command: python app.py
        host: tg-test-app2-hostname
        memory: 256M
        path: app.zip
      auto_services:
      - name: tg-test-broker1-service
        plan: first-plan
      - name: (( .properties.auto_service_name.value ))
      name: tg_test_app2
    tg_test_app3:
      app_manifest:
        memory: 256M
      auto_services:
      - name: tg-test-broker1-service
        plan: second-plan
        service_instance: tg-test-svc
      name: tg_test_app3
    tg_test_app4:
      name: tg_test_app4
    tg_test_app5:
      name: tg_test_app5
    tg_test_app6:
      name: tg_test_app6
    tg_test_app7:
      name: tg_test_app7
    tg_test_binary_app:
      app_manifest:
        buildpack: binary_buildpack
        command: ./binary-app.py
        memory: 256M
        path: binary-app.py
      auto_services: []
      name: tg_test_binary_app
    tg_test_broker1:
      app_manifest:
        buildpack: python_buildpack
        command: python app.py
        memory: 256M
        path: app.zip
      auto_services: []
      enable_global_access_to_plans: (( .properties.tg_test_broker1_enable_global_access_to_plans.value ))
      name: tg_test_broker1
    tg_test_broker2:
      app_manifest:
        buildpack: python_buildpack
        command: python app.py
        memory: 256M
        path: app.zip
      auto_services: []
      enable_global_access_to_plans: (( .properties.tg_test_broker2_enable_global_access_to_plans.value ))
      name: tg_test_broker2
    tg_test_buildpack:
      buildpack_order: (( .properties.tg_test_buildpack_buildpack_order.value ))
      name: tg_test_buildpack
    uaa:
      admin_client: (( ..cf.uaa.admin_client_credentials.identity ))
      admin_client_secret: (( ..cf.uaa.admin_client_credentials.password ))
    update_watch_timeout: (( .properties.update_watch_timeout.value ))
    username: (( .properties.username.value ))
    zip_code: (( .properties.zip_code.value ))
  max_in_flight: 1
  name: delete-all
  property_blueprints:
  - default:
      identity: vcap
    name: vm_credentials
    type: salted_credentials
  - name: app_credentials
    type: salted_credentials
  resource_definitions:
  - configurable: true
    default: 1024
    name: ram
    type: integer
  - configurable: true
    default: 4096
    name: ephemeral_disk
    type: integer
  - configurable: false
    constraints:
      min: 0
    default: 0
    name: persistent_disk
    type: integer
  - configurable: true
    default: 1
    name: cpu
    type: integer
  resource_label: delete-all
  single_az_only: true
  static_ip: 0
  templates:
  - consumes: |
      docker-tcp:
        from: docker
      nats:
        deployment: (( ..cf.deployment_name ))
        from: nats
      redis:
        from: redis
    name: delete-all
    release: test-tile


runtime_configs:
- name: example-runtime-config
  runtime_config: |
      addons:
      - include:
          jobs:
          - name: no-op
            release: no-op-release
        jobs:
        - name: hello
          release: runtime-test-release
        name: runtime-test-release
        properties:
          hello:
            port: 8119
      releases:
      - name: runtime-test-release
        version: 0.1.5


post_deploy_errands: 
- colocated: true
  instances:
  - node-yes/first
  label: colocated errand for no-op
  name: no-op
  run_default: true
- name: sanity-tests
- name: deploy-all


pre_delete_errands: 
- name: delete-all


update:
  canaries: 1
  canary_watch_time: 10000-(( .properties.canary_watch_timeout ))
  max_in_flight: 1
  update_watch_time: 10000-(( .properties.update_watch_timeout ))

provides_product_versions:
- name: test-tile
  version: '0.0.1'
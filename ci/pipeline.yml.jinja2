{% raw %}---

groups:

- name: ci
  jobs:
  - unit-tests
  - bump-prerelease
  - package-tile-generator
  - install-tile-generator
{% endraw %}{% for tile in tiles %}
  - build-{{tile}}
{% endfor %}{% raw %}
  - build-tile
  - acceptance-tests
  {% endraw %}{% for cluster in clusters %}- claim{{ cluster }}
  - deploy-tile{{ cluster }}
  - deployment-tests{{ cluster }}
  - remove-tile{{ cluster }}{% if not loop.last %}
  {% endif %}{% endfor %}{% raw %}

- name: release
  jobs:
  - bump-minor
  - bump-major
  - most-recent
  - create-release

resource_types:
- name: artifactory-path-version-resource
  type: registry-image
  check_every: 4h
  source:
      repository: ((artifactory.production_registry))/artifactory-path-version-resource
      tag: 0.0.11
      username: ((artifactory.production_username))
      password: ((artifactory.production_password))
- name: slack-notification
  type: registry-image
  check_every: 4h
  source:
    repository: ((artifactory.registry_mirror))/cfcommunity/slack-notification-resource
    username: ((artifactory.production_username))
    password: ((artifactory.production_password))
    tag: latest

- name: pypi
  type: registry-image
  check_every: 4h
  source:
    repository: ((artifactory.registry_mirror))/cfplatformeng/concourse-pypi-resource
    username: ((artifactory.production_username))
    password: ((artifactory.production_password))
    tag: latest

- name: pivnet
  type: registry-image
  check_every: 4h
  source:
    repository: ((artifactory.registry_mirror))/pivotalcf/pivnet-resource
    username: ((artifactory.production_username))
    password: ((artifactory.production_password))
    tag: latest-final

- name: shepherd
  type: registry-image
  check_every: 4h
  source:
    repository: us-west2-docker.pkg.dev/shepherd-268822/shepherd2/concourse-resource
    tag: latest

resources:
- name: oci-build-task
  type: registry-image
  check_every: 4h
  icon: oci
  source:
    repository: ((artifactory.registry_mirror))/concourse/oci-build-task
    tag: 0.11.1
    username: ((artifactory.production_username))
    password: ((artifactory.production_password))

- name: tile-generator-repo
  type: git
  source:
    ignore_paths: [ "ci/docker-tile-generator" ]
    branch: master
    uri: http://github.com/cf-platform-eng/tile-generator.git

- name: tile-generator-github-prerelease
  type: github-release
  source:
    user: cf-platform-eng
    repository: tile-generator
    access_token: ((github.access_token))
    release: false
    pre_release: true

- name: tile-generator-github-release
  type: github-release
  source:
    user: cf-platform-eng
    repository: tile-generator
    access_token: ((github.access_token))

- name: tile-generator-pypi-release
  type: pypi
  source:
    name: tile-generator
    username: ((pypi.username))
    password: ((pypi.password))

- name: tile-generator-dockerfile-repo
  type: git
  source:
    paths: [ "ci/docker-tile-generator" ]
    branch: master
    uri: http://github.com/cf-platform-eng/tile-generator.git

- name: tile-generator-package
  type: artifactory-path-version-resource
  source:
    url: ((artifactory.staging_url))/artifactory/
    user: ((artifactory.staging_username))
    password: ((artifactory.staging_password))
    repository: ((artifactory.staging_repo))
    path: tile-generator
    path_pattern: tile-generator-(?P<version>.*).tar.gz
    version_subexpression_name: version
    version_constraint: '>=0.0.0-dev.0'

- name: tile-generator-package-release
  type: artifactory-path-version-resource
  source:
    url: ((artifactory.staging_url))/artifactory/
    user: ((artifactory.staging_username))
    password: ((artifactory.staging_password))
    repository: ((artifactory.staging_repo))
    path: tile-generator/release
    path_pattern: bundle-(?P<version>.*).tar.gz
    version_subexpression_name: version
    version_constraint: '>=0.0.0-dev.0'

- name: generated-tile
  type: artifactory-path-version-resource
  source:
    url: ((artifactory.staging_url))/artifactory/
    user: ((artifactory.staging_username))
    password: ((artifactory.staging_password))
    repository: ((artifactory.staging_repo))
    path: tile-generator
    path_pattern: test-tile-(?P<version>.*)\.pivotal
    version_subexpression_name: version
    version_constraint: '>=0.0.0-dev.0'

- name: tile-history
  type: artifactory-path-version-resource
  source:
    url: ((artifactory.staging_url))/artifactory/
    user: ((artifactory.staging_username))
    password: ((artifactory.staging_password))
    repository: ((artifactory.staging_repo))
    path: tile-generator
    path_pattern: tile-history-(?P<version>.*).yml
    version_subexpression_name: version
    version_constraint: '>=0.0.0-dev.0'

- name: tile-generator-docker-image
  type: docker-image
  source:
    repository: tas-ecosystem-docker-prod-local.usw1.packages.broadcom.com/tanzu-isv-engineering/tile-generator-prerelease
    username: ((artifactory.production_username))
    password: ((artifactory.production_password))

- name: tile-generator-docker-image-release
  type: docker-image
  source:
    repository: tas-ecosystem-docker-prod-local.usw1.packages.broadcom.com/tanzu-isv-engineering/tile-generator
    username: ((artifactory.production_username))
    password: ((artifactory.production_password))

- name: app-docker-image
  type: registry-image
  source:
    repository: tas-ecosystem-docker-prod-local.usw1.packages.broadcom.com/partner-engineering/tile-generator-sample-app
    username: ((artifactory.production_username))
    password: ((artifactory.production_password))

- name: python3-image
  type: registry-image
  source:
    tag: 3.11-slim
    repository: ((artifactory.registry_mirror))/python
    username: ((artifactory.production_username))
    password: ((artifactory.production_password))

{% endraw %}{% for cluster in clusters %}- name: pcf-environment{{ cluster }}
  type: shepherd
  source:
    url: ((production_shepherd_api_endpoint))
    service-account-key: ((production_shepherd_service_key))
    lease:
      namespace: ((production_shepherd_namespace))
      pool:
        namespace: official
        name: tas{{ cluster }}{% if not loop.last %}
    compatibility-mode: environments-app

{% endif %}{% endfor %}

{% for tile in tiles %}- name: pivnet-{{tile}}
  type: pivnet
  source:
    api_token: {% raw %}{{pivnet-api-token}}{% endraw %}
    product_slug: z-test-{{tile}}
    access_key_id: {% raw %}{{pivnet-bucket-id}}{% endraw %}
    secret_access_key: {% raw %}{{pivnet-bucket-secret}}{% endraw %}

{% endfor %}{% raw %}

- name: slack-alert
  type: slack-notification
  source:
    url: ((slack_tile_generator.hook_url))

- name: version
  type: semver
  source:
    driver: git
    uri: git@github.com:cf-platform-eng/tile-generator
    branch: version
    file: version
    private_key: ((github.private_key))

jobs:

- name: unit-tests
  plan:
  - get: tile-generator-repo
    trigger: true
  - task: run-unit-tests
    config:
      image_resource:
        type: registry-image
        source:
          repository: ((artifactory.registry_mirror))/python
          tag: 3.11-slim
          username: ((artifactory.production_username))
          password: ((artifactory.production_password))
      platform: linux
      inputs:
      - name: tile-generator-repo
      run:
        path: bash
        args:
        - -exc
        - |
          command -v virtualenv >/dev/null 2>&1 || pip install virtualenv
          tile-generator-repo/ci/scripts/run-unittests.sh
    on_failure:
      in_parallel:
      - put: slack-alert
        params:
          channel: ((slack_tile_generator.channel))
          icon_emoji: ':concourse:'
          text: 'Unit tests failed, check <https://hush-house.pivotal.io/teams/PE/pipelines/tile-generator|here> for details'
          username: Tile Generator

- name: bump-prerelease
  plan:
  - get: tile-generator-repo
    passed: [ unit-tests ]
    trigger: true
  - put: version
    params:
      pre: dev

- name: package-tile-generator
  disable_manual_trigger: true
  plan:
  - in_parallel:
    - get: tile-generator-repo
      passed: [ bump-prerelease ]
    - get: version
      passed: [ bump-prerelease ]
      trigger: true
    - get: final-version
      resource: version
      params:
        bump: final
  - task: build-package
    config:
      image_resource:
        type: registry-image
        source:
          repository: ((artifactory.registry_mirror))/python
          tag: 3.11.4-slim-buster
          username: ((artifactory.production_username))
          password: ((artifactory.production_password))
      platform: linux
      inputs:
      - name: tile-generator-repo
      - name: version
      - name: final-version
      outputs:
      - name: tile-generator-dist
      - name: tile-generator-dist-release
      run:
        path: bash
        args:
        - -exc 
        - |
          command -v virtualenv >/dev/null 2>&1 || pip install virtualenv
          apt update
          command -v objcopy >/dev/null 2>&1 && command -v git >/dev/null 2>&1 || apt install --yes binutils git
          apt install patchelf

          cd tile-generator-repo

          function build(){
            rm -rf dist*
            for VER in "$VERSION" "$FINAL_VERSION"; do
              echo "version_string = '$VER'" > tile_generator/version.py
              ./pyinstaller/build-binaries.sh
              if [ -z "$SKIP_SDIST" ]; then
                echo "Building SDist"
                python setup.py sdist
                # Setuptools normalizes versions and does not support semver.
                # See https://github.com/pypa/setuptools/issues/308
                mv dist/tile-generator-*.tar.gz dist/tile-generator-"$VER".tar.gz || true
              fi
              mv dist dist-"$VER"
            done
          }

          VERSION=`cat ../version/version`
          FINAL_VERSION=`cat ../final-version/version`
          build
          HEAD=`git log --pretty=format:'%h' -n 1`

          cp dist-"$VERSION"/* ../tile-generator-dist/
          tar -cvzf ../tile-generator-dist-release/bundle-"$VERSION".tar.gz dist-"$FINAL_VERSION"/*
    on_failure:
      in_parallel:
      - put: slack-alert
        params:
          channel: ((slack_tile_generator.channel))
          icon_emoji: ':concourse:'
          text: 'Tile Generator package build failed, check <https://hush-house.pivotal.io/teams/PE/pipelines/tile-generator|here> for details'
          username: Tile Generator
  - in_parallel:
      - put: tile-generator-package
        inputs: detect
        params:
          strip_path_prefix: tile-generator-dist
          file_pattern: tile-generator-dist/tile-generator-*.tar.gz
      - put: tile-generator-package-release
        inputs: detect
        params:
          strip_path_prefix: tile-generator-dist-release
          file_pattern: tile-generator-dist-release/bundle-*.tar.gz
      - put: tile-generator-github-prerelease
        inputs: detect
        params:
          name: version/version
          tag: version/version
          tag_prefix: v
          globs:
          - tile-generator-dist/*

- name: install-tile-generator
  disable_manual_trigger: true
  plan:
  - in_parallel:
    - get: tile-generator-package
      passed: [ package-tile-generator ]
    - get: tile-generator-package-release
      passed: [ package-tile-generator ]
    - get: tile-generator-repo
      passed: [ package-tile-generator ]
    - get: version
      passed: [ package-tile-generator ]
      trigger: true
    - get: tile-generator-dockerfile-repo
  - task: prepare-docker-build
    config:
      image_resource:
        type: registry-image
        source:
          repository: ((artifactory.registry_mirror))/python
          tag: 3-slim
          username: ((artifactory.production_username))
          password: ((artifactory.production_password))
      platform: linux
      inputs:
      - name: tile-generator-dockerfile-repo
      - name: tile-generator-package-release
      - name: version
      outputs:
      - name: docker-build-dir
      - name: image-version-tag
      run:
        path: sh
        args:
        - -c
        - cp tile-generator-package-release/* docker-build-dir/ && cp tile-generator-dockerfile-repo/ci/docker-tile-generator/* docker-build-dir/
        - mkdir -p image-version-tag
        - echo "v$(cat version/version)" > image-version-tag/version
    on_failure:
      in_parallel:
      - put: slack-alert
        params:
          channel: ((slack_tile_generator.channel))
          icon_emoji: ':concourse:'
          text: 'Tile Generator docker build failed, check <https://hush-house.pivotal.io/teams/PE/pipelines/tile-generator|here> for details'
          username: Tile Generator
  - get: oci-build-task
  - get: python3-image
    params:
      format: oci
  - file: image-version-tag/version
    load_var: image_version
  - task: build-oci
    privileged: true
    image: oci-build-task
    config:
      platform: linux
      inputs:
        - name: docker-build-dir
        - name: python3-image
      outputs:
        - name: image
      params:
        CONTEXT: docker-build-dir
        DOCKERFILE: docker-build-dir/Dockerfile
        IMAGE_ARG_python3: python3-image/image.tar
      run:
        path: build
    output_mapping:
      image: docker-image-out
  - put: tile-generator-docker-image
    inputs: detect
    attempts: 3
    params:
      image: docker-image-out/image.tar
      version: ((.:image_version))

- name: build-tile
  disable_manual_trigger: true
  plan:
  - in_parallel:
    - get: tile-generator-docker-image
      passed: [ install-tile-generator ]
    - get: tile-history
    - get: tile-generator-repo
      passed: [ install-tile-generator ]
    - get: version
      passed: [ install-tile-generator ]
      trigger: true
    - get: tile-generator-package
      passed: [ install-tile-generator ]
    - get: tile-generator-package-release
      passed: [ install-tile-generator ]
  - task: build-sample-apps
    image: tile-generator-docker-image
    config:
      platform: linux
      inputs:
      - name: tile-generator-repo
      outputs:
      - name: sample-tile-build
      run:
        path: bash
        args:
        - -exc
        - |
          command -v zip >/dev/null 2>&1 || apt update && apt install --yes zip
          tile-generator-repo/sample/src/build.sh sample-tile-build
    on_failure:
      in_parallel:
      - put: slack-alert
        params:
          channel: ((slack_tile_generator.channel))
          icon_emoji: ':concourse:'
          text: 'Sample app build failed, check <https://hush-house.pivotal.io/teams/PE/pipelines/tile-generator|here> for details'
          username: Tile Generator
  - get: python3-image
    params:
      format: oci
  - get: oci-build-task
  - task: build-oci
    privileged: true
    image: oci-build-task
    config:
      platform: linux
      inputs:
        - name: sample-tile-build
        - name: python3-image
      outputs:
        - name: image
      params:
        CONTEXT: sample-tile-build/src
        DOCKERFILE: sample-tile-build/src/Dockerfile
        IMAGE_ARG_python3: python3-image/image.tar
      run:
        path: build
    output_mapping:
      image: docker-image-out
  - put: app-docker-image
    params:
      image: docker-image-out/image.tar
  - get: app-docker-image
    params:
      format: oci
  - task: populate-docker-cache
    image: tile-generator-docker-image
    config:
      platform: linux
      inputs:
      - name: app-docker-image
      outputs:
      - name: docker-cache
      run:
        path: sh
        args: [ "-c", 'cp app-docker-image/image.tar docker-cache/guidowb-sample-cf-app.tgz']
    on_failure:
      in_parallel:
      - put: slack-alert
        params:
          channel: ((slack_tile_generator.channel))
          icon_emoji: ':concourse:'
          text: 'Sample app docker build failed, check <https://hush-house.pivotal.io/teams/PE/pipelines/tile-generator|here> for details'
          username: Tile Generator
  - task: build-sample-tile
    image: tile-generator-docker-image
    config:
      platform: linux
      inputs:
      - name: tile-generator-repo
      - name: sample-tile-build
      - name: tile-history
      - name: docker-cache
      - name: version
      outputs:
      - name: generated-tile
      params:
        GITHUB_API_TOKEN: ((github.access_token))
      run:
        path: tile-generator-repo/ci/scripts/tile-build.sh
        args: [ "sample-tile-build", "tile-history", "generated-tile", "docker-cache", "version" ]
    on_failure:
      in_parallel:
      - put: slack-alert
        params:
          channel: ((slack_tile_generator.channel))
          icon_emoji: ':concourse:'
          text: 'Tile build failed, check <https://hush-house.pivotal.io/teams/PE/pipelines/tile-generator|here> for details'
          username: Tile Generator
  - put: tile-history
    inputs: detect
    params:
      strip_path_prefix: generated-tile
      file_pattern: generated-tile/tile-history-*.yml
  - put: generated-tile
    inputs: detect
    params:
      strip_path_prefix: generated-tile
      file_pattern: generated-tile/*.pivotal

- name: acceptance-tests
  disable_manual_trigger: true
  plan:
  - in_parallel:
    - get: tile-generator-docker-image
      passed: [ build-tile ]
    - get: generated-tile
      passed: [ build-tile ]
    - get: tile-generator-repo
      passed: [ build-tile ]
    - get: version
      passed: [ build-tile ]
      trigger: true
    - get: tile-generator-package
      passed: [ build-tile ]
    - get: tile-generator-package-release
      passed: [ build-tile ]
  - task: run-acceptance-tests
    image: tile-generator-docker-image
    config:
      platform: linux
      inputs:
      - name: tile-generator-repo
      - name: generated-tile
      run:
        path: bash
        args:
        - -exc
        - |
          command -v unzip >/dev/null 2>&1 || apt update && apt install unzip
          command -v virtualenv >/dev/null 2>&1 || pip install virtualenv
          tile-generator-repo/ci/scripts/run-acceptancetests.sh `pwd`/generated-tile
    on_failure:
      in_parallel:
      - put: slack-alert
        params:
          channel: ((slack_tile_generator.channel))
          icon_emoji: ':concourse:'
          text: 'Acceptance tests failed, check <https://hush-house.pivotal.io/teams/PE/pipelines/tile-generator|here> for details'
          username: Tile Generator

{% endraw %}{% for cluster in clusters %}- name: claim{{ cluster }}
  plan:
  - in_parallel:
    - get: tile-generator-docker-image
      passed: [ acceptance-tests ]
    - get: generated-tile
      passed: [ acceptance-tests ]
    - get: tile-generator-repo
      passed: [ acceptance-tests ]
    - get: version
      passed: [ acceptance-tests ]
      trigger: true
    - get: tile-generator-package
      passed: [ acceptance-tests ]
    - get: tile-generator-package-release
      passed: [ acceptance-tests ]
    - put: pcf-environment{{ cluster }}
      params:
        action: create
        duration: 4h
        resource: pcf-environment{{ cluster }}
      timeout: 5h

- name: deploy-tile{{ cluster }}
  disable_manual_trigger: true
  plan:
  - in_parallel:
    - get: tile-generator-docker-image
      passed: [ claim{{ cluster }} ]
    - get: generated-tile
      passed: [ claim{{ cluster }} ]
    - get: tile-generator-repo
      passed: [ claim{{ cluster }} ]
    - get: version
      passed: [ claim{{ cluster }} ]
      trigger: true
    - get: tile-generator-package
      passed: [ claim{{ cluster }} ]
    - get: tile-generator-package-release
      passed: [ claim{{ cluster }} ]
    - get: pcf-environment{{ cluster }}
      passed: [ claim{{ cluster }} ]
      trigger: true
  - task: run-deploy-tile
    image: tile-generator-docker-image
    config:
      platform: linux
      inputs:
      - name: tile-generator-repo
      - name: pcf-environment{{ cluster }}
      - name: generated-tile
      run:
        path: bash
        args:
        - -exc
        - |
          command -v jq >/dev/null 2>&1 || apt update && apt install --yes jq
          # Our env use weak ssl ciphers :( so downgrade the minimum version
          sed -i 's/DEFAULT@SECLEVEL=2/DEFAULT@SECLEVEL=1/g' /etc/ssl/openssl.cnf
          # Upload stemcell based off of metadata
          cd generated-tile/
          unzip -o test-tile-*.pivotal
          STEMCELL_OS=`cat metadata/test-tile.yml  | grep stemcell_criteria -A 3 | grep os | tr -d ' ' | cut -d ':' -f 2`
          STEMCELL_VERSION=`cat metadata/test-tile.yml  | grep stemcell_criteria -A 3 | grep version | tr -d " '" | cut -d ':' -f 2`
          pushd ../pcf-environment*
          STEMCELL_AVAILABLE=`pcf stemcells`
          popd
          if [[ $STEMCELL_AVAILABLE == *"stemcell-$STEMCELL_VERSION"*"$STEMCELL_OS"* ]]; then
            echo "A stemcell for $STEMCELL_OS version $STEMCELL_VERSION already is in $STEMCELL_AVAILABLE skipping...";
          else
            wget https://bosh.io/stemcells/bosh-google-kvm-$STEMCELL_OS-go_agent -O bosh.io_stemcells
            STEMCELL_URL=`cat bosh.io_stemcells | grep light | grep $STEMCELL_VERSION | cut -d '"' -f 2 | head -n 1`
            wget $STEMCELL_URL
            pushd ../pcf-environment*
            pcf upload-stemcell ../generated-tile/light-bosh-stemcell-*
            popd
          fi
          cd ..
          tile-generator-repo/ci/scripts/run-deploytile.sh generated-tile pcf-environment{{ cluster }}
    on_failure:
      in_parallel:
      - put: slack-alert
        params:
          {% raw %}channel: ((slack_tile_generator.channel)){% endraw %}
          icon_emoji: ':concourse:'
          text: 'Deploy tile failed, check <https://hush-house.pivotal.io/teams/PE/pipelines/tile-generator|here> for details'
          username: Tile Generator

- name: deployment-tests{{ cluster }}
  disable_manual_trigger: true
  plan:
  - in_parallel:
    - get: tile-generator-docker-image
      passed: [ deploy-tile{{ cluster }} ]
    - get: generated-tile
      passed: [ deploy-tile{{ cluster }} ]
    - get: pcf-environment{{ cluster }}
      passed: [ deploy-tile{{ cluster }} ]
      trigger: true
    - get: tile-generator-repo
      passed: [ deploy-tile{{ cluster }} ]
    - get: version
      passed: [ deploy-tile{{ cluster }} ]
      trigger: true
    - get: tile-generator-package
      passed: [ deploy-tile{{ cluster }} ]
    - get: tile-generator-package-release
      passed: [ deploy-tile{{ cluster }} ]
  - task: run-deployment-tests
    image: tile-generator-docker-image
    config:
      platform: linux
      inputs:
      - name: tile-generator-repo
      - name: pcf-environment{{ cluster }}
      - name: generated-tile
      run:
        path: bash
        args:
        - -exc
        - |
          command -v virtualenv >/dev/null 2>&1 || pip install virtualenv
          # Our env use weak ssl ciphers :( so downgrade the minimum version
          sed -i 's/DEFAULT@SECLEVEL=2/DEFAULT@SECLEVEL=1/g' /etc/ssl/openssl.cnf
          tile-generator-repo/ci/scripts/run-deploymenttests.sh generated-tile pcf-environment{{ cluster }}
    on_failure:
      in_parallel:
      - put: slack-alert
        params:
          {% raw %}channel: ((slack_tile_generator.channel)){% endraw %}
          icon_emoji: ':concourse:'
          text: 'Deployment tests failed, check <https://hush-house.pivotal.io/teams/PE/pipelines/tile-generator|here> for details'
          username: Tile Generator

- name: remove-tile{{ cluster }}
  disable_manual_trigger: true
  plan:
  - in_parallel:
    - get: tile-generator-docker-image
      passed: [ deployment-tests{{ cluster }} ]
    - get: generated-tile
      passed: [ deployment-tests{{ cluster }} ]
    - get: pcf-environment{{ cluster }}
      passed: [ deployment-tests{{ cluster }} ]
      trigger: true
    - get: tile-generator-repo
      passed: [ deployment-tests{{ cluster }} ]
    - get: version
      passed: [ deployment-tests{{ cluster }} ]
      trigger: true
    - get: tile-generator-package
      passed: [ deployment-tests{{ cluster }} ]
    - get: tile-generator-package-release
      passed: [ deployment-tests{{ cluster }} ]
  - task: remove-tile
    image: tile-generator-docker-image
    config:
      platform: linux
      inputs:
      - name: tile-generator-repo
      - name: pcf-environment{{ cluster }}
      - name: generated-tile
      run:
        path: bash
        args:
        - -exc
        - |
          # Our env use weak ssl ciphers :( so downgrade the minimum version
          sed -i 's/DEFAULT@SECLEVEL=2/DEFAULT@SECLEVEL=1/g' /etc/ssl/openssl.cnf
          tile-generator-repo/ci/scripts/run-removetile.sh generated-tile pcf-environment{{ cluster }}
    on_failure:
      put: slack-alert
      params:
        {% raw %}channel: ((slack_tile_generator.channel)){% endraw %}
        icon_emoji: ':concourse:'
        text: 'Remove tile failed, check <https://hush-house.pivotal.io/teams/PE/pipelines/tile-generator|here> for details'
        username: Tile Generator
  - put: pcf-environment{{ cluster }}
    params:
      inputs: []
      action: release
      resource: pcf-environment{{ cluster }}{% if not loop.last %}

{% endif %}{% endfor %}{% raw %}

- name: most-recent
  disable_manual_trigger: true
  plan:
  - in_parallel:
    - get: tile-generator-docker-image
      passed: [ {% endraw %}{% for cluster in clusters %}remove-tile{{ cluster }}{% if not loop.last %}, {% endif %}{% endfor %}{% raw %} ]
    - get: tile-generator-repo
      passed: [ {% endraw %}{% for cluster in clusters %}remove-tile{{ cluster }}{% if not loop.last %}, {% endif %}{% endfor %}{% raw %} ]
    - get: tile-generator-package
      passed: [ {% endraw %}{% for cluster in clusters %}remove-tile{{ cluster }}{% if not loop.last %}, {% endif %}{% endfor %}{% raw %} ]
    - get: tile-generator-package-release
      passed: [ {% endraw %}{% for cluster in clusters %}remove-tile{{ cluster }}{% if not loop.last %}, {% endif %}{% endfor %}{% raw %} ]
    - get: version
      passed: [ {% endraw %}{% for cluster in clusters %}remove-tile{{ cluster }}{% if not loop.last %}, {% endif %}{% endfor %}{% raw %} ]
      trigger: true

- name: create-release
  plan:
  - in_parallel:
    - get: tile-generator-docker-image
      passed: [ most-recent ]
      params:
        format: oci
    - get: tile-generator-package-release
      passed: [ most-recent ]
    - get: version
      passed: [ most-recent ]
  - put: version
    params:
      bump: final
  - task: rename-files
    image: tile-generator-docker-image
    config:
      platform: linux
      inputs:
      - name: tile-generator-package-release
      - name: version
      outputs:
      - name: release-files
      run:
        path: sh
        args:
        - -exc
        - |
          tar -xvf tile-generator-package-release/bundle-*.tar.gz -C release-files/
  - in_parallel:
    - put: tile-generator-github-release
      inputs: detect
      params:
        name: version/version
        tag: version/version
        tag_prefix: v
        globs:
        - release-files/dist*/*
    - task: prepare-docker-build
      config:
        image_resource:
          type: registry-image
          source:
            repository: ((artifactory.registry_mirror))
            tag: 3-slim
            username: ((artifactory.production_username))
            password: ((artifactory.production_password))
        platform: linux
        inputs:
        - name: version
        outputs:
        - name: image-version-tag
        run:
          path: sh
          args:
          - -c
          - mkdir -p image-version-tag
          - echo "v$(cat version/version)" > image-version-tag/version
    - file: image-version-tag/version
      load_var: image_version
    - put: tile-generator-docker-image-release
      inputs: detect
      params:
        image: tile-generator-docker-image/image.tar
        version: ((.:image_version))
        bump_aliases: true
    - put: tile-generator-pypi-release
      inputs: detect
      params:
        glob: release-files/dist*/tile-generator-*.tar.gz
    - put: version
      params:
        bump: patch

- name: bump-minor
  plan:
  - put: version
    params:
      bump: minor

- name: bump-major
  plan:
  - put: version
    params:
      bump: major
{% endraw %}
